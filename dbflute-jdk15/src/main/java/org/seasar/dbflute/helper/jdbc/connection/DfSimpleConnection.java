package org.seasar.dbflute.helper.jdbc.connection;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Savepoint;
import java.sql.Statement;
import java.util.Map;

public class DfSimpleConnection implements Connection {

    protected Connection _realConnection;

    public DfSimpleConnection(Connection realConnection) {
        _realConnection = realConnection;
    }

    public void clearWarnings() throws SQLException {
        _realConnection.clearWarnings();
    }

    public void close() throws SQLException {
        // _realConnection.close();
    }

    public void closeReally() throws SQLException {
        _realConnection.close();
    }

    public void commit() throws SQLException {
        _realConnection.commit();
    }

    public Statement createStatement() throws SQLException {
        return _realConnection.createStatement();
    }

    public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability)
            throws SQLException {
        return _realConnection.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);
    }

    public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
        return _realConnection.createStatement(resultSetType, resultSetConcurrency);
    }

    public boolean getAutoCommit() throws SQLException {
        return _realConnection.getAutoCommit();
    }

    public String getCatalog() throws SQLException {
        return _realConnection.getCatalog();
    }

    public int getHoldability() throws SQLException {
        return _realConnection.getHoldability();
    }

    public DatabaseMetaData getMetaData() throws SQLException {
        return _realConnection.getMetaData();
    }

    public int getTransactionIsolation() throws SQLException {
        return _realConnection.getTransactionIsolation();
    }

    public Map<String, Class<?>> getTypeMap() throws SQLException {
        return _realConnection.getTypeMap();
    }

    public SQLWarning getWarnings() throws SQLException {
        return _realConnection.getWarnings();
    }

    public boolean isClosed() throws SQLException {
        return _realConnection.isClosed();
    }

    public boolean isReadOnly() throws SQLException {
        return _realConnection.isReadOnly();
    }

    public String nativeSQL(String sql) throws SQLException {
        return _realConnection.nativeSQL(sql);
    }

    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency,
            int resultSetHoldability) throws SQLException {
        return _realConnection.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
    }

    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        return _realConnection.prepareCall(sql, resultSetType, resultSetConcurrency);
    }

    public CallableStatement prepareCall(String sql) throws SQLException {
        return _realConnection.prepareCall(sql);
    }

    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency,
            int resultSetHoldability) throws SQLException {
        return _realConnection.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
    }

    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency)
            throws SQLException {
        return _realConnection.prepareStatement(sql, resultSetType, resultSetConcurrency);
    }

    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        return _realConnection.prepareStatement(sql, autoGeneratedKeys);
    }

    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        return _realConnection.prepareStatement(sql, columnIndexes);
    }

    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        return _realConnection.prepareStatement(sql, columnNames);
    }

    public PreparedStatement prepareStatement(String sql) throws SQLException {
        return _realConnection.prepareStatement(sql);
    }

    public void releaseSavepoint(Savepoint savepoint) throws SQLException {
        _realConnection.releaseSavepoint(savepoint);
    }

    public void rollback() throws SQLException {
        _realConnection.rollback();
    }

    public void rollback(Savepoint savepoint) throws SQLException {
        _realConnection.rollback(savepoint);
    }

    public void setAutoCommit(boolean autoCommit) throws SQLException {
        _realConnection.setAutoCommit(autoCommit);
    }

    public void setCatalog(String catalog) throws SQLException {
        _realConnection.setCatalog(catalog);
    }

    public void setHoldability(int holdability) throws SQLException {
        _realConnection.setHoldability(holdability);
    }

    public void setReadOnly(boolean readOnly) throws SQLException {
        _realConnection.setReadOnly(readOnly);
    }

    public Savepoint setSavepoint() throws SQLException {
        return _realConnection.setSavepoint();
    }

    public Savepoint setSavepoint(String name) throws SQLException {
        return _realConnection.setSavepoint(name);
    }

    public void setTransactionIsolation(int level) throws SQLException {
        _realConnection.setTransactionIsolation(level);
    }

    public void setTypeMap(Map<String, Class<?>> map) throws SQLException {
        _realConnection.setTypeMap(map);
    }
}
