map:{
    ; 2012/04/12 11:23:51 = map:{
        ; diffDate = 2012/04/12 11:23:51
        ; tableCount = map:{
            ; next = 22
            ; previous = 20
        }
        ; tableDiff = map:{
            ; VENDOR_IDENTITY_ONLY = map:{
                ; tableName = VENDOR_IDENTITY_ONLY
                ; diffType = ADD
            }
            ; VENDOR_PRIMARY_KEY_ONLY = map:{
                ; tableName = VENDOR_PRIMARY_KEY_ONLY
                ; diffType = ADD
            }
        }
    }
    ; 2012/03/25 12:50:22 = map:{
        ; diffDate = 2012/03/25 12:50:22
        ; tableCount = map:{
            ; next = 20
            ; previous = 20
        }
        ; tableDiff = map:{
            ; VENDOR_CHECK = map:{
                ; tableName = VENDOR_CHECK
                ; diffType = CHANGE
                ; columnDiff = map:{
                    ; J_A_V_A_BEANS_PROPERTY = map:{
                        ; columnName = J_A_V_A_BEANS_PROPERTY
                        ; diffType = ADD
                    }
                    ; J_POP_BEANS_PROPERTY = map:{
                        ; columnName = J_POP_BEANS_PROPERTY
                        ; diffType = ADD
                    }
                    ; J_A_V_A_BEAN_PROPERTY = map:{
                        ; columnName = J_A_V_A_BEAN_PROPERTY
                        ; diffType = DELETE
                    }
                    ; J_BEAN_PROPERTY = map:{
                        ; columnName = J_BEAN_PROPERTY
                        ; diffType = DELETE
                    }
                }
            }
        }
    }
    ; 2012/03/25 12:44:31 = map:{
        ; diffDate = 2012/03/25 12:44:31
        ; tableCount = map:{
            ; next = 20
            ; previous = 20
        }
        ; tableDiff = map:{
            ; VENDOR_CHECK = map:{
                ; tableName = VENDOR_CHECK
                ; diffType = CHANGE
                ; columnDiff = map:{
                    ; J_BEAN_PROPERTY = map:{
                        ; columnName = J_BEAN_PROPERTY
                        ; diffType = ADD
                    }
                    ; J_A_V_A_BEAN_PROPERTY = map:{
                        ; columnName = J_A_V_A_BEAN_PROPERTY
                        ; diffType = ADD
                    }
                    ; U_Y_TEXT = map:{
                        ; columnName = U_Y_TEXT
                        ; diffType = DELETE
                    }
                }
            }
        }
    }
    ; 2012/03/05 13:52:29 = map:{
        ; diffDate = 2012/03/05 13:52:29
        ; tableCount = map:{
            ; next = 20
            ; previous = 16
        }
        ; tableDiff = map:{
            ; VENDOR_$_DOLLAR = map:{
                ; tableName = VENDOR_$_DOLLAR
                ; diffType = ADD
            }
            ; VENDOR_CHECK = map:{
                ; tableName = VENDOR_CHECK
                ; diffType = ADD
            }
            ; VENDOR_THE_LONG_AND_WINDING_TABLE_AND_COLUMN = map:{
                ; tableName = VENDOR_THE_LONG_AND_WINDING_TABLE_AND_COLUMN
                ; diffType = ADD
            }
            ; VENDOR_THE_LONG_AND_WINDING_TABLE_AND_COLUMN_REF = map:{
                ; tableName = VENDOR_THE_LONG_AND_WINDING_TABLE_AND_COLUMN_REF
                ; diffType = ADD
            }
            ; MEMBER = map:{
                ; tableName = MEMBER
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "会員: 会員登録時にデータが登録される。基本的に物理削除はなく、退会したらステータスが退会会員になる。ライフサイクルやカテゴリの違う会員それぞれの詳細情報は、別途 one-to-one のテーブルに。"
                    ; previous = "null"
                }
                ; columnDiff = map:{
                    ; MEMBER_ID = map:{
                        ; columnName = MEMBER_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "会員ID: 会員を識別するID。連番として自動採番される。
（会員IDだけに限らず）採番方法はDBMS次第。"
                            ; previous = ""
                        }
                    }
                    ; MEMBER_NAME = map:{
                        ; columnName = MEMBER_NAME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "会員名称: 会員のフルネームの名称。
苗字と名前を分けて管理することも多いが、ここでは Example なので単純にひとまとめ。"
                            ; previous = ""
                        }
                    }
                    ; MEMBER_ACCOUNT = map:{
                        ; columnName = MEMBER_ACCOUNT
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "会員アカウント: 会員がログイン時に利用するアカウントNO。
昨今、メールアドレスをログインIDとすることが多いので、あまり見かけなくないかも。"
                            ; previous = ""
                        }
                    }
                    ; MEMBER_STATUS_CODE = map:{
                        ; columnName = MEMBER_STATUS_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "会員ステータスコード: 会員ステータスを参照するコード。
ステータスが変わるたびに、このカラムが更新される。"
                            ; previous = ""
                        }
                    }
                    ; FORMALIZED_DATETIME = map:{
                        ; columnName = FORMALIZED_DATETIME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "正式会員日時: 会員が正式に確定した日時。
一度確定したら更新されない。"
                            ; previous = ""
                        }
                    }
                    ; BIRTHDATE = map:{
                        ; columnName = BIRTHDATE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "生年月日: 必須項目ではないので、このデータがない会員もいる。"
                            ; previous = ""
                        }
                    }
                    ; REGISTER_DATETIME = map:{
                        ; columnName = REGISTER_DATETIME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "登録日時: レコードが登録された日時。
会員が登録された日時とほぼ等しいが、そういった業務的な役割を兼務させるのはあまり推奨されない。
どのテーブルでも同じなので、共通カラムの説明はこのテーブルでしか書かない。"
                            ; previous = ""
                        }
                    }
                    ; REGISTER_USER = map:{
                        ; columnName = REGISTER_USER
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "登録ユーザ: レコードを登録したユーザ。
会員テーブルであれば当然、会員自身であるはずだが、他のテーブルの場合では管理画面から運用者による登録など考えられるので、しっかり保持しておく。"
                            ; previous = ""
                        }
                    }
                    ; UPDATE_DATETIME = map:{
                        ; columnName = UPDATE_DATETIME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "更新日時: レコードが（最後に）更新された日時。
業務的な利用はあまり推奨されないと別項目で説明したが、このカラムはソートの要素としてよく利用される。"
                            ; previous = ""
                        }
                    }
                    ; UPDATE_USER = map:{
                        ; columnName = UPDATE_USER
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "更新ユーザ: レコードを更新したユーザ。
システムは誰が何をしたのかちゃんと覚えている。"
                            ; previous = ""
                        }
                    }
                    ; VERSION_NO = map:{
                        ; columnName = VERSION_NO
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。"
                            ; previous = ""
                        }
                    }
                }
            }
            ; MEMBER_ADDRESS = map:{
                ; tableName = MEMBER_ADDRESS
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "会員住所情報: 会員の住所に関する情報で、同時に有効期間ごとに履歴管理されている。
会員を基点に考えた場合、構造的にはone-to-many だが、業務的な定型条件でone-to-one になる。このような構造を「業務的one-to-one」と呼ぶ。
有効期間は隙間なく埋められるが、ここでは住所情報のない会員も存在し、厳密には(業務的な) "1 : 0...1" である。"
                    ; previous = "null"
                }
                ; columnDiff = map:{
                    ; MEMBER_ADDRESS_ID = map:{
                        ; columnName = MEMBER_ADDRESS_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。"
                            ; previous = ""
                        }
                    }
                    ; MEMBER_ID = map:{
                        ; columnName = MEMBER_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。
有効開始日と合わせて複合ユニーク制約となるが、
厳密には完全な制約にはなっていない。
有効期間の概念はRDBでは表現しきれないのである。"
                            ; previous = ""
                        }
                    }
                    ; VALID_BEGIN_DATE = map:{
                        ; columnName = VALID_BEGIN_DATE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。"
                            ; previous = ""
                        }
                    }
                    ; VALID_END_DATE = map:{
                        ; columnName = VALID_END_DATE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。"
                            ; previous = ""
                        }
                    }
                    ; ADDRESS = map:{
                        ; columnName = ADDRESS
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "住所: まるごと住所"
                            ; previous = ""
                        }
                    }
                    ; REGION_ID = map:{
                        ; columnName = REGION_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。
（業務的one-to-oneの親テーブルの表現したかっ...）"
                            ; previous = ""
                        }
                    }
                }
            }
            ; MEMBER_LOGIN = map:{
                ; tableName = MEMBER_LOGIN
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "会員ログイン: ログインするたびに登録されるログイン履歴。
登録されたら更新されるも削除されることもない。さらには登録する人もプログラムもはっきりしているので、ここでは共通カラムは(紙面の都合上もあって)省略している。"
                    ; previous = "null"
                }
                ; columnDiff = map:{
                    ; MEMBER_LOGIN_ID = map:{
                        ; columnName = MEMBER_LOGIN_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "会員ログインID: "
                            ; previous = ""
                        }
                    }
                    ; MEMBER_ID = map:{
                        ; columnName = MEMBER_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "会員ID: "
                            ; previous = ""
                        }
                    }
                    ; LOGIN_DATETIME = map:{
                        ; columnName = LOGIN_DATETIME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "ログイン日時: ログインした瞬間の日時。"
                            ; previous = ""
                        }
                    }
                    ; MOBILE_LOGIN_FLG = map:{
                        ; columnName = MOBILE_LOGIN_FLG
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "モバイルログインフラグ: モバイル機器からのログインか否か。"
                            ; previous = ""
                        }
                    }
                    ; LOGIN_MEMBER_STATUS_CODE = map:{
                        ; columnName = LOGIN_MEMBER_STATUS_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "ログイン会員ステータスコード: ログイン時の会員ステータス"
                            ; previous = ""
                        }
                    }
                }
            }
            ; MEMBER_SECURITY = map:{
                ; tableName = MEMBER_SECURITY
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある"
                    ; previous = "null"
                }
                ; columnDiff = map:{
                    ; MEMBER_ID = map:{
                        ; columnName = MEMBER_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "会員ID: そのまま one-to-one を構成するためのFKとなる。"
                            ; previous = ""
                        }
                    }
                    ; LOGIN_PASSWORD = map:{
                        ; columnName = LOGIN_PASSWORD
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。"
                            ; previous = ""
                        }
                    }
                    ; REMINDER_QUESTION = map:{
                        ; columnName = REMINDER_QUESTION
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。"
                            ; previous = ""
                        }
                    }
                    ; REMINDER_ANSWER = map:{
                        ; columnName = REMINDER_ANSWER
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。"
                            ; previous = ""
                        }
                    }
                    ; REMINDER_USE_COUNT = map:{
                        ; columnName = REMINDER_USE_COUNT
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "リマインダ利用回数: リマインダを利用した回数。
多いと忘れっぽい会員と言えるが、
そんなことを知ってもしょうがない。"
                            ; previous = ""
                        }
                    }
                }
            }
            ; MEMBER_SERVICE = map:{
                ; tableName = MEMBER_SERVICE
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "会員サービス: 会員のサービス情報（ポイントサービスなど）。
ExampleDBとして、あえて統一性を崩してユニーク制約経由の one-to-one を表現している。"
                    ; previous = "null"
                }
                ; columnDiff = map:{
                    ; MEMBER_SERVICE_ID = map:{
                        ; columnName = MEMBER_SERVICE_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "会員サービスID: 独立した主キーとなるが、実質的に会員IDとは one-to-one である。"
                            ; previous = ""
                        }
                    }
                    ; MEMBER_ID = map:{
                        ; columnName = MEMBER_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。"
                            ; previous = ""
                        }
                    }
                    ; SERVICE_POINT_COUNT = map:{
                        ; columnName = SERVICE_POINT_COUNT
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。"
                            ; previous = ""
                        }
                    }
                    ; SERVICE_RANK_CODE = map:{
                        ; columnName = SERVICE_RANK_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。"
                            ; previous = ""
                        }
                    }
                }
            }
            ; MEMBER_STATUS = map:{
                ; tableName = MEMBER_STATUS
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "会員ステータス: 会員のステータスを示す固定的なマスタテーブル。
業務で増えることはなく、増減するときは実装もともなうレベルの業務変更と考えられる。

こういった固定的なマスタテーブルには、更新日時などの共通カラムは定義していないが、業務上そういった情報を管理する必要性が低いという理由に加え、ExampleDBとして共通カラムでER図が埋め尽くされてしまい見づらくなるという
ところで割り切っている。実業務では統一的に定義することもある。"
                    ; previous = "null"
                }
                ; columnDiff = map:{
                    ; MEMBER_STATUS_CODE = map:{
                        ; columnName = MEMBER_STATUS_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "会員ステータスコード: 会員ステータスを識別するコード。
固定的なデータなので、連番とか番号にはせず、
データを直接見たときも人が直感的にわかるように、
このような３桁のコード形式にしている。
"
                            ; previous = ""
                        }
                    }
                    ; MEMBER_STATUS_NAME = map:{
                        ; columnName = MEMBER_STATUS_NAME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "会員ステータス名称: "
                            ; previous = ""
                        }
                    }
                    ; DESCRIPTION = map:{
                        ; columnName = DESCRIPTION
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。"
                            ; previous = ""
                        }
                    }
                    ; DISPLAY_ORDER = map:{
                        ; columnName = DISPLAY_ORDER
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。"
                            ; previous = ""
                        }
                    }
                }
            }
            ; MEMBER_WITHDRAWAL = map:{
                ; tableName = MEMBER_WITHDRAWAL
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。（"1 : 0...1" のパターンの one-to-one）
共通カラムがあってバージョンNOがないパターン。基本的に更新が入ることはないが、登録ユーザを保持したいのと、重要なデータなので更新系の情報も。"
                    ; previous = "null"
                }
                ; columnDiff = map:{
                    ; WITHDRAWAL_REASON_CODE = map:{
                        ; columnName = WITHDRAWAL_REASON_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。"
                            ; previous = ""
                        }
                    }
                    ; WITHDRAWAL_REASON_INPUT_TEXT = map:{
                        ; columnName = WITHDRAWAL_REASON_INPUT_TEXT
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。
サイト運営側としては真摯に受け止めて改善していきたい。"
                            ; previous = ""
                        }
                    }
                    ; WITHDRAWAL_DATETIME = map:{
                        ; columnName = WITHDRAWAL_DATETIME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。"
                            ; previous = ""
                        }
                    }
                }
            }
            ; PRODUCT = map:{
                ; tableName = PRODUCT
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "商品: "
                    ; previous = "null"
                }
                ; columnDiff = map:{
                    ; PRODUCT_NAME = map:{
                        ; columnName = PRODUCT_NAME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "商品名称: ExampleDBとして、コメントの少ないケースを表現するため、
あえてコメントを控えている。実業務ではしっかりとコメントを
入れることが強く強く推奨される。"
                            ; previous = ""
                        }
                    }
                    ; PRODUCT_HANDLE_CODE = map:{
                        ; columnName = PRODUCT_HANDLE_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "商品ハンドルコード: 商品を識別する業務上のコード。"
                            ; previous = ""
                        }
                    }
                }
            }
            ; PRODUCT_CATEGORY = map:{
                ; tableName = PRODUCT_CATEGORY
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。"
                    ; previous = "null"
                }
                ; columnDiff = map:{
                    ; PRODUCT_CATEGORY_CODE = map:{
                        ; columnName = PRODUCT_CATEGORY_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "商品カテゴリコード: "
                            ; previous = ""
                        }
                    }
                    ; PRODUCT_CATEGORY_NAME = map:{
                        ; columnName = PRODUCT_CATEGORY_NAME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "商品カテゴリ名称: "
                            ; previous = ""
                        }
                    }
                    ; PARENT_CATEGORY_CODE = map:{
                        ; columnName = PARENT_CATEGORY_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "親カテゴリコード: 最上位の場合はデータなし。"
                            ; previous = ""
                        }
                    }
                }
            }
            ; PRODUCT_STATUS = map:{
                ; tableName = PRODUCT_STATUS
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "商品ステータス: 商品のステータスを表現する固定的なマスタ。"
                    ; previous = "null"
                }
                ; columnDiff = map:{
                    ; PRODUCT_STATUS_CODE = map:{
                        ; columnName = PRODUCT_STATUS_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "商品ステータスコード: 商品ステータスを識別するコード。"
                            ; previous = ""
                        }
                    }
                }
            }
            ; PURCHASE = map:{
                ; tableName = PURCHASE
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "購入: 一つの商品に対する購入を表現する。
実業務であれば購入詳細というテーブルを作り、「購入という行為」と「その中身（詳細）」を違う粒度のデータとしてそれぞれ管理するのが一般的と言えるでしょう。というか、注文とか請求とかそういうことを考え始めたらもっと複雑になるはずですが、ExampleDBということで割り切っています。"
                    ; previous = "null"
                }
                ; columnDiff = map:{
                    ; MEMBER_ID = map:{
                        ; columnName = MEMBER_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。"
                            ; previous = ""
                        }
                    }
                    ; PRODUCT_ID = map:{
                        ; columnName = PRODUCT_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "商品ID: 商品を参照するID。"
                            ; previous = ""
                        }
                    }
                    ; PURCHASE_DATETIME = map:{
                        ; columnName = PURCHASE_DATETIME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "購入日時: 購入した瞬間の日時。"
                            ; previous = ""
                        }
                    }
                    ; PURCHASE_COUNT = map:{
                        ; columnName = PURCHASE_COUNT
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "購入数量: 購入した商品の（一回の購入における）数量。"
                            ; previous = ""
                        }
                    }
                    ; PURCHASE_PRICE = map:{
                        ; columnName = PURCHASE_PRICE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。"
                            ; previous = ""
                        }
                    }
                    ; PAYMENT_COMPLETE_FLG = map:{
                        ; columnName = PAYMENT_COMPLETE_FLG
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "支払完了フラグ: この購入に関しての支払いが完了しているか否か。"
                            ; previous = ""
                        }
                    }
                }
            }
            ; REGION = map:{
                ; tableName = REGION
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。
業務的one-to-oneの親テーブル。"
                    ; previous = "null"
                }
                ; columnDiff = map:{
                    ; REGION_ID = map:{
                        ; columnName = REGION_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "地域ID: 地域を識別するID。
珍しく(固定的な)マスタテーブルとしては数値だが、
Exampleなのでやはり色々なパターンがないと。"
                            ; previous = ""
                        }
                    }
                    ; REGION_NAME = map:{
                        ; columnName = REGION_NAME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "地域名称: 地域を表す名称。"
                            ; previous = ""
                        }
                    }
                }
            }
            ; SERVICE_RANK = map:{
                ; tableName = SERVICE_RANK
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）"
                    ; previous = "null"
                }
                ; columnDiff = map:{
                    ; SERVICE_RANK_CODE = map:{
                        ; columnName = SERVICE_RANK_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "サービスランクコード: サービスランクを識別するコード。"
                            ; previous = ""
                        }
                    }
                    ; SERVICE_RANK_NAME = map:{
                        ; columnName = SERVICE_RANK_NAME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）"
                            ; previous = ""
                        }
                    }
                    ; SERVICE_POINT_INCIDENCE = map:{
                        ; columnName = SERVICE_POINT_INCIDENCE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。
ExampleDBとして数少ない貴重な小数点ありのカラム。"
                            ; previous = ""
                        }
                    }
                    ; NEW_ACCEPTABLE_FLG = map:{
                        ; columnName = NEW_ACCEPTABLE_FLG
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。"
                            ; previous = ""
                        }
                    }
                    ; DESCRIPTION = map:{
                        ; columnName = DESCRIPTION
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "説明: ランクに関する業務的な説明。"
                            ; previous = ""
                        }
                    }
                    ; DISPLAY_ORDER = map:{
                        ; columnName = DISPLAY_ORDER
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "表示順: UI上の表示順を表現する番号。"
                            ; previous = ""
                        }
                    }
                }
            }
            ; WITHDRAWAL_REASON = map:{
                ; tableName = WITHDRAWAL_REASON
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "退会理由: 会員に選ばせる定型的な退会理由のマスタ。"
                    ; previous = "null"
                }
                ; columnDiff = map:{
                    ; WITHDRAWAL_REASON_CODE = map:{
                        ; columnName = WITHDRAWAL_REASON_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "退会理由コード: "
                            ; previous = ""
                        }
                    }
                    ; WITHDRAWAL_REASON_TEXT = map:{
                        ; columnName = WITHDRAWAL_REASON_TEXT
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。"
                            ; previous = ""
                        }
                    }
                }
            }
        }
    }
    ; 2012/03/05 13:49:55 = map:{
        ; diffDate = 2012/03/05 13:49:55
        ; tableCount = map:{
            ; next = 16
            ; previous = 20
        }
        ; tableDiff = map:{
            ; MEMBER = map:{
                ; tableName = MEMBER
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "null"
                    ; previous = "会員: 会員登録時にデータが登録される。基本的に物理削除はなく、退会したらステータスが退会会員になる。ライフサイクルやカテゴリの違う会員それぞれの詳細情報は、別途 one-to-one のテーブルに。"
                }
                ; columnDiff = map:{
                    ; MEMBER_ID = map:{
                        ; columnName = MEMBER_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "会員ID: 会員を識別するID。連番として自動採番される。
（会員IDだけに限らず）採番方法はDBMS次第。"
                        }
                    }
                    ; MEMBER_NAME = map:{
                        ; columnName = MEMBER_NAME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "会員名称: 会員のフルネームの名称。
苗字と名前を分けて管理することも多いが、ここでは Example なので単純にひとまとめ。"
                        }
                    }
                    ; MEMBER_ACCOUNT = map:{
                        ; columnName = MEMBER_ACCOUNT
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "会員アカウント: 会員がログイン時に利用するアカウントNO。
昨今、メールアドレスをログインIDとすることが多いので、あまり見かけなくないかも。"
                        }
                    }
                    ; MEMBER_STATUS_CODE = map:{
                        ; columnName = MEMBER_STATUS_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "会員ステータスコード: 会員ステータスを参照するコード。
ステータスが変わるたびに、このカラムが更新される。"
                        }
                    }
                    ; FORMALIZED_DATETIME = map:{
                        ; columnName = FORMALIZED_DATETIME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "正式会員日時: 会員が正式に確定した日時。
一度確定したら更新されない。"
                        }
                    }
                    ; BIRTHDATE = map:{
                        ; columnName = BIRTHDATE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "生年月日: 必須項目ではないので、このデータがない会員もいる。"
                        }
                    }
                    ; REGISTER_DATETIME = map:{
                        ; columnName = REGISTER_DATETIME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "登録日時: レコードが登録された日時。
会員が登録された日時とほぼ等しいが、そういった業務的な役割を兼務させるのはあまり推奨されない。
どのテーブルでも同じなので、共通カラムの説明はこのテーブルでしか書かない。"
                        }
                    }
                    ; REGISTER_USER = map:{
                        ; columnName = REGISTER_USER
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "登録ユーザ: レコードを登録したユーザ。
会員テーブルであれば当然、会員自身であるはずだが、他のテーブルの場合では管理画面から運用者による登録など考えられるので、しっかり保持しておく。"
                        }
                    }
                    ; UPDATE_DATETIME = map:{
                        ; columnName = UPDATE_DATETIME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "更新日時: レコードが（最後に）更新された日時。
業務的な利用はあまり推奨されないと別項目で説明したが、このカラムはソートの要素としてよく利用される。"
                        }
                    }
                    ; UPDATE_USER = map:{
                        ; columnName = UPDATE_USER
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "更新ユーザ: レコードを更新したユーザ。
システムは誰が何をしたのかちゃんと覚えている。"
                        }
                    }
                    ; VERSION_NO = map:{
                        ; columnName = VERSION_NO
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。"
                        }
                    }
                }
            }
            ; MEMBER_ADDRESS = map:{
                ; tableName = MEMBER_ADDRESS
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "null"
                    ; previous = "会員住所情報: 会員の住所に関する情報で、同時に有効期間ごとに履歴管理されている。
会員を基点に考えた場合、構造的にはone-to-many だが、業務的な定型条件でone-to-one になる。このような構造を「業務的one-to-one」と呼ぶ。
有効期間は隙間なく埋められるが、ここでは住所情報のない会員も存在し、厳密には(業務的な) "1 : 0...1" である。"
                }
                ; columnDiff = map:{
                    ; MEMBER_ADDRESS_ID = map:{
                        ; columnName = MEMBER_ADDRESS_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。"
                        }
                    }
                    ; MEMBER_ID = map:{
                        ; columnName = MEMBER_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。
有効開始日と合わせて複合ユニーク制約となるが、
厳密には完全な制約にはなっていない。
有効期間の概念はRDBでは表現しきれないのである。"
                        }
                    }
                    ; VALID_BEGIN_DATE = map:{
                        ; columnName = VALID_BEGIN_DATE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。"
                        }
                    }
                    ; VALID_END_DATE = map:{
                        ; columnName = VALID_END_DATE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。"
                        }
                    }
                    ; ADDRESS = map:{
                        ; columnName = ADDRESS
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "住所: まるごと住所"
                        }
                    }
                    ; REGION_ID = map:{
                        ; columnName = REGION_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。
（業務的one-to-oneの親テーブルの表現したかっ...）"
                        }
                    }
                }
            }
            ; MEMBER_LOGIN = map:{
                ; tableName = MEMBER_LOGIN
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "null"
                    ; previous = "会員ログイン: ログインするたびに登録されるログイン履歴。
登録されたら更新されるも削除されることもない。さらには登録する人もプログラムもはっきりしているので、ここでは共通カラムは(紙面の都合上もあって)省略している。"
                }
                ; columnDiff = map:{
                    ; MEMBER_LOGIN_ID = map:{
                        ; columnName = MEMBER_LOGIN_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "会員ログインID: "
                        }
                    }
                    ; MEMBER_ID = map:{
                        ; columnName = MEMBER_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "会員ID: "
                        }
                    }
                    ; LOGIN_DATETIME = map:{
                        ; columnName = LOGIN_DATETIME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "ログイン日時: ログインした瞬間の日時。"
                        }
                    }
                    ; MOBILE_LOGIN_FLG = map:{
                        ; columnName = MOBILE_LOGIN_FLG
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "モバイルログインフラグ: モバイル機器からのログインか否か。"
                        }
                    }
                    ; LOGIN_MEMBER_STATUS_CODE = map:{
                        ; columnName = LOGIN_MEMBER_STATUS_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "ログイン会員ステータスコード: ログイン時の会員ステータス"
                        }
                    }
                }
            }
            ; MEMBER_SECURITY = map:{
                ; tableName = MEMBER_SECURITY
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "null"
                    ; previous = "会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある"
                }
                ; columnDiff = map:{
                    ; MEMBER_ID = map:{
                        ; columnName = MEMBER_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "会員ID: そのまま one-to-one を構成するためのFKとなる。"
                        }
                    }
                    ; LOGIN_PASSWORD = map:{
                        ; columnName = LOGIN_PASSWORD
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。"
                        }
                    }
                    ; REMINDER_QUESTION = map:{
                        ; columnName = REMINDER_QUESTION
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。"
                        }
                    }
                    ; REMINDER_ANSWER = map:{
                        ; columnName = REMINDER_ANSWER
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。"
                        }
                    }
                    ; REMINDER_USE_COUNT = map:{
                        ; columnName = REMINDER_USE_COUNT
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "リマインダ利用回数: リマインダを利用した回数。
多いと忘れっぽい会員と言えるが、
そんなことを知ってもしょうがない。"
                        }
                    }
                }
            }
            ; MEMBER_SERVICE = map:{
                ; tableName = MEMBER_SERVICE
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "null"
                    ; previous = "会員サービス: 会員のサービス情報（ポイントサービスなど）。
ExampleDBとして、あえて統一性を崩してユニーク制約経由の one-to-one を表現している。"
                }
                ; columnDiff = map:{
                    ; MEMBER_SERVICE_ID = map:{
                        ; columnName = MEMBER_SERVICE_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "会員サービスID: 独立した主キーとなるが、実質的に会員IDとは one-to-one である。"
                        }
                    }
                    ; MEMBER_ID = map:{
                        ; columnName = MEMBER_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。"
                        }
                    }
                    ; SERVICE_POINT_COUNT = map:{
                        ; columnName = SERVICE_POINT_COUNT
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。"
                        }
                    }
                    ; SERVICE_RANK_CODE = map:{
                        ; columnName = SERVICE_RANK_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。"
                        }
                    }
                }
            }
            ; MEMBER_STATUS = map:{
                ; tableName = MEMBER_STATUS
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "null"
                    ; previous = "会員ステータス: 会員のステータスを示す固定的なマスタテーブル。
業務で増えることはなく、増減するときは実装もともなうレベルの業務変更と考えられる。

こういった固定的なマスタテーブルには、更新日時などの共通カラムは定義していないが、業務上そういった情報を管理する必要性が低いという理由に加え、ExampleDBとして共通カラムでER図が埋め尽くされてしまい見づらくなるという
ところで割り切っている。実業務では統一的に定義することもある。"
                }
                ; columnDiff = map:{
                    ; MEMBER_STATUS_CODE = map:{
                        ; columnName = MEMBER_STATUS_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "会員ステータスコード: 会員ステータスを識別するコード。
固定的なデータなので、連番とか番号にはせず、
データを直接見たときも人が直感的にわかるように、
このような３桁のコード形式にしている。
"
                        }
                    }
                    ; MEMBER_STATUS_NAME = map:{
                        ; columnName = MEMBER_STATUS_NAME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "会員ステータス名称: "
                        }
                    }
                    ; DESCRIPTION = map:{
                        ; columnName = DESCRIPTION
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。"
                        }
                    }
                    ; DISPLAY_ORDER = map:{
                        ; columnName = DISPLAY_ORDER
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。"
                        }
                    }
                }
            }
            ; MEMBER_WITHDRAWAL = map:{
                ; tableName = MEMBER_WITHDRAWAL
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "null"
                    ; previous = "会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。（"1 : 0...1" のパターンの one-to-one）
共通カラムがあってバージョンNOがないパターン。基本的に更新が入ることはないが、登録ユーザを保持したいのと、重要なデータなので更新系の情報も。"
                }
                ; columnDiff = map:{
                    ; WITHDRAWAL_REASON_CODE = map:{
                        ; columnName = WITHDRAWAL_REASON_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。"
                        }
                    }
                    ; WITHDRAWAL_REASON_INPUT_TEXT = map:{
                        ; columnName = WITHDRAWAL_REASON_INPUT_TEXT
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。
サイト運営側としては真摯に受け止めて改善していきたい。"
                        }
                    }
                    ; WITHDRAWAL_DATETIME = map:{
                        ; columnName = WITHDRAWAL_DATETIME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。"
                        }
                    }
                }
            }
            ; PRODUCT = map:{
                ; tableName = PRODUCT
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "null"
                    ; previous = "商品: "
                }
                ; columnDiff = map:{
                    ; PRODUCT_NAME = map:{
                        ; columnName = PRODUCT_NAME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "商品名称: ExampleDBとして、コメントの少ないケースを表現するため、
あえてコメントを控えている。実業務ではしっかりとコメントを
入れることが強く強く推奨される。"
                        }
                    }
                    ; PRODUCT_HANDLE_CODE = map:{
                        ; columnName = PRODUCT_HANDLE_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "商品ハンドルコード: 商品を識別する業務上のコード。"
                        }
                    }
                }
            }
            ; PRODUCT_CATEGORY = map:{
                ; tableName = PRODUCT_CATEGORY
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "null"
                    ; previous = "商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。"
                }
                ; columnDiff = map:{
                    ; PRODUCT_CATEGORY_CODE = map:{
                        ; columnName = PRODUCT_CATEGORY_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "商品カテゴリコード: "
                        }
                    }
                    ; PRODUCT_CATEGORY_NAME = map:{
                        ; columnName = PRODUCT_CATEGORY_NAME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "商品カテゴリ名称: "
                        }
                    }
                    ; PARENT_CATEGORY_CODE = map:{
                        ; columnName = PARENT_CATEGORY_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "親カテゴリコード: 最上位の場合はデータなし。"
                        }
                    }
                }
            }
            ; PRODUCT_STATUS = map:{
                ; tableName = PRODUCT_STATUS
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "null"
                    ; previous = "商品ステータス: 商品のステータスを表現する固定的なマスタ。"
                }
                ; columnDiff = map:{
                    ; PRODUCT_STATUS_CODE = map:{
                        ; columnName = PRODUCT_STATUS_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "商品ステータスコード: 商品ステータスを識別するコード。"
                        }
                    }
                }
            }
            ; PURCHASE = map:{
                ; tableName = PURCHASE
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "null"
                    ; previous = "購入: 一つの商品に対する購入を表現する。
実業務であれば購入詳細というテーブルを作り、「購入という行為」と「その中身（詳細）」を違う粒度のデータとしてそれぞれ管理するのが一般的と言えるでしょう。というか、注文とか請求とかそういうことを考え始めたらもっと複雑になるはずですが、ExampleDBということで割り切っています。"
                }
                ; columnDiff = map:{
                    ; MEMBER_ID = map:{
                        ; columnName = MEMBER_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。"
                        }
                    }
                    ; PRODUCT_ID = map:{
                        ; columnName = PRODUCT_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "商品ID: 商品を参照するID。"
                        }
                    }
                    ; PURCHASE_DATETIME = map:{
                        ; columnName = PURCHASE_DATETIME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "購入日時: 購入した瞬間の日時。"
                        }
                    }
                    ; PURCHASE_COUNT = map:{
                        ; columnName = PURCHASE_COUNT
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "購入数量: 購入した商品の（一回の購入における）数量。"
                        }
                    }
                    ; PURCHASE_PRICE = map:{
                        ; columnName = PURCHASE_PRICE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。"
                        }
                    }
                    ; PAYMENT_COMPLETE_FLG = map:{
                        ; columnName = PAYMENT_COMPLETE_FLG
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "支払完了フラグ: この購入に関しての支払いが完了しているか否か。"
                        }
                    }
                }
            }
            ; REGION = map:{
                ; tableName = REGION
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "null"
                    ; previous = "地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。
業務的one-to-oneの親テーブル。"
                }
                ; columnDiff = map:{
                    ; REGION_ID = map:{
                        ; columnName = REGION_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "地域ID: 地域を識別するID。
珍しく(固定的な)マスタテーブルとしては数値だが、
Exampleなのでやはり色々なパターンがないと。"
                        }
                    }
                    ; REGION_NAME = map:{
                        ; columnName = REGION_NAME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "地域名称: 地域を表す名称。"
                        }
                    }
                }
            }
            ; SERVICE_RANK = map:{
                ; tableName = SERVICE_RANK
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "null"
                    ; previous = "サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）"
                }
                ; columnDiff = map:{
                    ; SERVICE_RANK_CODE = map:{
                        ; columnName = SERVICE_RANK_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "サービスランクコード: サービスランクを識別するコード。"
                        }
                    }
                    ; SERVICE_RANK_NAME = map:{
                        ; columnName = SERVICE_RANK_NAME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）"
                        }
                    }
                    ; SERVICE_POINT_INCIDENCE = map:{
                        ; columnName = SERVICE_POINT_INCIDENCE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。
ExampleDBとして数少ない貴重な小数点ありのカラム。"
                        }
                    }
                    ; NEW_ACCEPTABLE_FLG = map:{
                        ; columnName = NEW_ACCEPTABLE_FLG
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。"
                        }
                    }
                    ; DESCRIPTION = map:{
                        ; columnName = DESCRIPTION
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "説明: ランクに関する業務的な説明。"
                        }
                    }
                    ; DISPLAY_ORDER = map:{
                        ; columnName = DISPLAY_ORDER
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "表示順: UI上の表示順を表現する番号。"
                        }
                    }
                }
            }
            ; WITHDRAWAL_REASON = map:{
                ; tableName = WITHDRAWAL_REASON
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "null"
                    ; previous = "退会理由: 会員に選ばせる定型的な退会理由のマスタ。"
                }
                ; columnDiff = map:{
                    ; WITHDRAWAL_REASON_CODE = map:{
                        ; columnName = WITHDRAWAL_REASON_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "退会理由コード: "
                        }
                    }
                    ; WITHDRAWAL_REASON_TEXT = map:{
                        ; columnName = WITHDRAWAL_REASON_TEXT
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。"
                        }
                    }
                }
            }
            ; VENDOR_$_DOLLAR = map:{
                ; tableName = VENDOR_$_DOLLAR
                ; diffType = DELETE
            }
            ; VENDOR_CHECK = map:{
                ; tableName = VENDOR_CHECK
                ; diffType = DELETE
            }
            ; VENDOR_THE_LONG_AND_WINDING_TABLE_AND_COLUMN = map:{
                ; tableName = VENDOR_THE_LONG_AND_WINDING_TABLE_AND_COLUMN
                ; diffType = DELETE
            }
            ; VENDOR_THE_LONG_AND_WINDING_TABLE_AND_COLUMN_REF = map:{
                ; tableName = VENDOR_THE_LONG_AND_WINDING_TABLE_AND_COLUMN_REF
                ; diffType = DELETE
            }
        }
    }
    ; 2012/03/05 13:23:48 = map:{
        ; diffDate = 2012/03/05 13:23:48
        ; tableCount = map:{
            ; next = 20
            ; previous = 14
        }
        ; tableDiff = map:{
            ; VENDOR_$_DOLLAR = map:{
                ; tableName = VENDOR_$_DOLLAR
                ; diffType = ADD
            }
            ; VENDOR_CHECK = map:{
                ; tableName = VENDOR_CHECK
                ; diffType = ADD
            }
            ; VENDOR_THE_LONG_AND_WINDING_TABLE_AND_COLUMN = map:{
                ; tableName = VENDOR_THE_LONG_AND_WINDING_TABLE_AND_COLUMN
                ; diffType = ADD
            }
            ; VENDOR_THE_LONG_AND_WINDING_TABLE_AND_COLUMN_REF = map:{
                ; tableName = VENDOR_THE_LONG_AND_WINDING_TABLE_AND_COLUMN_REF
                ; diffType = ADD
            }
            ; SUMMARY_PRODUCT = map:{
                ; tableName = SUMMARY_PRODUCT
                ; diffType = ADD
            }
            ; SUMMARY_WITHDRAWAL = map:{
                ; tableName = SUMMARY_WITHDRAWAL
                ; diffType = ADD
            }
            ; MEMBER = map:{
                ; tableName = MEMBER
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "会員: 会員登録時にデータが登録される。基本的に物理削除はなく、退会したらステータスが退会会員になる。ライフサイクルやカテゴリの違う会員それぞれの詳細情報は、別途 one-to-one のテーブルに。"
                    ; previous = "null"
                }
                ; columnDiff = map:{
                    ; MEMBER_ID = map:{
                        ; columnName = MEMBER_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "会員ID: 会員を識別するID。連番として自動採番される。
（会員IDだけに限らず）採番方法はDBMS次第。"
                            ; previous = ""
                        }
                    }
                    ; MEMBER_NAME = map:{
                        ; columnName = MEMBER_NAME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "会員名称: 会員のフルネームの名称。
苗字と名前を分けて管理することも多いが、ここでは Example なので単純にひとまとめ。"
                            ; previous = ""
                        }
                    }
                    ; MEMBER_ACCOUNT = map:{
                        ; columnName = MEMBER_ACCOUNT
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "会員アカウント: 会員がログイン時に利用するアカウントNO。
昨今、メールアドレスをログインIDとすることが多いので、あまり見かけなくないかも。"
                            ; previous = ""
                        }
                    }
                    ; MEMBER_STATUS_CODE = map:{
                        ; columnName = MEMBER_STATUS_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "会員ステータスコード: 会員ステータスを参照するコード。
ステータスが変わるたびに、このカラムが更新される。"
                            ; previous = ""
                        }
                    }
                    ; FORMALIZED_DATETIME = map:{
                        ; columnName = FORMALIZED_DATETIME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "正式会員日時: 会員が正式に確定した日時。
一度確定したら更新されない。"
                            ; previous = ""
                        }
                    }
                    ; BIRTHDATE = map:{
                        ; columnName = BIRTHDATE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "生年月日: 必須項目ではないので、このデータがない会員もいる。"
                            ; previous = ""
                        }
                    }
                    ; REGISTER_DATETIME = map:{
                        ; columnName = REGISTER_DATETIME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "登録日時: レコードが登録された日時。
会員が登録された日時とほぼ等しいが、そういった業務的な役割を兼務させるのはあまり推奨されない。
どのテーブルでも同じなので、共通カラムの説明はこのテーブルでしか書かない。"
                            ; previous = ""
                        }
                    }
                    ; REGISTER_USER = map:{
                        ; columnName = REGISTER_USER
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "登録ユーザ: レコードを登録したユーザ。
会員テーブルであれば当然、会員自身であるはずだが、他のテーブルの場合では管理画面から運用者による登録など考えられるので、しっかり保持しておく。"
                            ; previous = ""
                        }
                    }
                    ; UPDATE_DATETIME = map:{
                        ; columnName = UPDATE_DATETIME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "更新日時: レコードが（最後に）更新された日時。
業務的な利用はあまり推奨されないと別項目で説明したが、このカラムはソートの要素としてよく利用される。"
                            ; previous = ""
                        }
                    }
                    ; UPDATE_USER = map:{
                        ; columnName = UPDATE_USER
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "更新ユーザ: レコードを更新したユーザ。
システムは誰が何をしたのかちゃんと覚えている。"
                            ; previous = ""
                        }
                    }
                    ; VERSION_NO = map:{
                        ; columnName = VERSION_NO
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。"
                            ; previous = ""
                        }
                    }
                }
            }
            ; MEMBER_ADDRESS = map:{
                ; tableName = MEMBER_ADDRESS
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "会員住所情報: 会員の住所に関する情報で、同時に有効期間ごとに履歴管理されている。
会員を基点に考えた場合、構造的にはone-to-many だが、業務的な定型条件でone-to-one になる。このような構造を「業務的one-to-one」と呼ぶ。
有効期間は隙間なく埋められるが、ここでは住所情報のない会員も存在し、厳密には(業務的な) "1 : 0...1" である。"
                    ; previous = "null"
                }
                ; columnDiff = map:{
                    ; MEMBER_ADDRESS_ID = map:{
                        ; columnName = MEMBER_ADDRESS_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。"
                            ; previous = ""
                        }
                    }
                    ; MEMBER_ID = map:{
                        ; columnName = MEMBER_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。
有効開始日と合わせて複合ユニーク制約となるが、
厳密には完全な制約にはなっていない。
有効期間の概念はRDBでは表現しきれないのである。"
                            ; previous = ""
                        }
                    }
                    ; VALID_BEGIN_DATE = map:{
                        ; columnName = VALID_BEGIN_DATE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。"
                            ; previous = ""
                        }
                    }
                    ; VALID_END_DATE = map:{
                        ; columnName = VALID_END_DATE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。"
                            ; previous = ""
                        }
                    }
                    ; ADDRESS = map:{
                        ; columnName = ADDRESS
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "住所: まるごと住所"
                            ; previous = ""
                        }
                    }
                    ; REGION_ID = map:{
                        ; columnName = REGION_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。
（業務的one-to-oneの親テーブルの表現したかっ...）"
                            ; previous = ""
                        }
                    }
                }
            }
            ; MEMBER_LOGIN = map:{
                ; tableName = MEMBER_LOGIN
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "会員ログイン: ログインするたびに登録されるログイン履歴。
登録されたら更新されるも削除されることもない。さらには登録する人もプログラムもはっきりしているので、ここでは共通カラムは(紙面の都合上もあって)省略している。"
                    ; previous = "null"
                }
                ; columnDiff = map:{
                    ; MEMBER_LOGIN_ID = map:{
                        ; columnName = MEMBER_LOGIN_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "会員ログインID: "
                            ; previous = ""
                        }
                    }
                    ; MEMBER_ID = map:{
                        ; columnName = MEMBER_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "会員ID: "
                            ; previous = ""
                        }
                    }
                    ; LOGIN_DATETIME = map:{
                        ; columnName = LOGIN_DATETIME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "ログイン日時: ログインした瞬間の日時。"
                            ; previous = ""
                        }
                    }
                    ; MOBILE_LOGIN_FLG = map:{
                        ; columnName = MOBILE_LOGIN_FLG
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "モバイルログインフラグ: モバイル機器からのログインか否か。"
                            ; previous = ""
                        }
                    }
                    ; LOGIN_MEMBER_STATUS_CODE = map:{
                        ; columnName = LOGIN_MEMBER_STATUS_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "ログイン会員ステータスコード: ログイン時の会員ステータス"
                            ; previous = ""
                        }
                    }
                }
            }
            ; MEMBER_SECURITY = map:{
                ; tableName = MEMBER_SECURITY
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある"
                    ; previous = "null"
                }
                ; columnDiff = map:{
                    ; MEMBER_ID = map:{
                        ; columnName = MEMBER_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "会員ID: そのまま one-to-one を構成するためのFKとなる。"
                            ; previous = ""
                        }
                    }
                    ; LOGIN_PASSWORD = map:{
                        ; columnName = LOGIN_PASSWORD
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。"
                            ; previous = ""
                        }
                    }
                    ; REMINDER_QUESTION = map:{
                        ; columnName = REMINDER_QUESTION
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。"
                            ; previous = ""
                        }
                    }
                    ; REMINDER_ANSWER = map:{
                        ; columnName = REMINDER_ANSWER
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。"
                            ; previous = ""
                        }
                    }
                    ; REMINDER_USE_COUNT = map:{
                        ; columnName = REMINDER_USE_COUNT
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "リマインダ利用回数: リマインダを利用した回数。
多いと忘れっぽい会員と言えるが、
そんなことを知ってもしょうがない。"
                            ; previous = ""
                        }
                    }
                }
            }
            ; MEMBER_SERVICE = map:{
                ; tableName = MEMBER_SERVICE
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "会員サービス: 会員のサービス情報（ポイントサービスなど）。
ExampleDBとして、あえて統一性を崩してユニーク制約経由の one-to-one を表現している。"
                    ; previous = "null"
                }
                ; columnDiff = map:{
                    ; MEMBER_SERVICE_ID = map:{
                        ; columnName = MEMBER_SERVICE_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "会員サービスID: 独立した主キーとなるが、実質的に会員IDとは one-to-one である。"
                            ; previous = ""
                        }
                    }
                    ; MEMBER_ID = map:{
                        ; columnName = MEMBER_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。"
                            ; previous = ""
                        }
                    }
                    ; SERVICE_POINT_COUNT = map:{
                        ; columnName = SERVICE_POINT_COUNT
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。"
                            ; previous = ""
                        }
                    }
                    ; SERVICE_RANK_CODE = map:{
                        ; columnName = SERVICE_RANK_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。"
                            ; previous = ""
                        }
                    }
                }
            }
            ; MEMBER_STATUS = map:{
                ; tableName = MEMBER_STATUS
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "会員ステータス: 会員のステータスを示す固定的なマスタテーブル。
業務で増えることはなく、増減するときは実装もともなうレベルの業務変更と考えられる。

こういった固定的なマスタテーブルには、更新日時などの共通カラムは定義していないが、業務上そういった情報を管理する必要性が低いという理由に加え、ExampleDBとして共通カラムでER図が埋め尽くされてしまい見づらくなるという
ところで割り切っている。実業務では統一的に定義することもある。"
                    ; previous = "null"
                }
                ; columnDiff = map:{
                    ; MEMBER_STATUS_CODE = map:{
                        ; columnName = MEMBER_STATUS_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "会員ステータスコード: 会員ステータスを識別するコード。
固定的なデータなので、連番とか番号にはせず、
データを直接見たときも人が直感的にわかるように、
このような３桁のコード形式にしている。
"
                            ; previous = ""
                        }
                    }
                    ; MEMBER_STATUS_NAME = map:{
                        ; columnName = MEMBER_STATUS_NAME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "会員ステータス名称: "
                            ; previous = ""
                        }
                    }
                    ; DESCRIPTION = map:{
                        ; columnName = DESCRIPTION
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。"
                            ; previous = ""
                        }
                    }
                    ; DISPLAY_ORDER = map:{
                        ; columnName = DISPLAY_ORDER
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。"
                            ; previous = ""
                        }
                    }
                }
            }
            ; MEMBER_WITHDRAWAL = map:{
                ; tableName = MEMBER_WITHDRAWAL
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。（"1 : 0...1" のパターンの one-to-one）
共通カラムがあってバージョンNOがないパターン。基本的に更新が入ることはないが、登録ユーザを保持したいのと、重要なデータなので更新系の情報も。"
                    ; previous = "null"
                }
                ; columnDiff = map:{
                    ; WITHDRAWAL_REASON_CODE = map:{
                        ; columnName = WITHDRAWAL_REASON_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。"
                            ; previous = ""
                        }
                    }
                    ; WITHDRAWAL_REASON_INPUT_TEXT = map:{
                        ; columnName = WITHDRAWAL_REASON_INPUT_TEXT
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。
サイト運営側としては真摯に受け止めて改善していきたい。"
                            ; previous = ""
                        }
                    }
                    ; WITHDRAWAL_DATETIME = map:{
                        ; columnName = WITHDRAWAL_DATETIME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。"
                            ; previous = ""
                        }
                    }
                }
            }
            ; PRODUCT = map:{
                ; tableName = PRODUCT
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "商品: "
                    ; previous = "null"
                }
                ; columnDiff = map:{
                    ; PRODUCT_NAME = map:{
                        ; columnName = PRODUCT_NAME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "商品名称: ExampleDBとして、コメントの少ないケースを表現するため、
あえてコメントを控えている。実業務ではしっかりとコメントを
入れることが強く強く推奨される。"
                            ; previous = ""
                        }
                    }
                    ; PRODUCT_HANDLE_CODE = map:{
                        ; columnName = PRODUCT_HANDLE_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "商品ハンドルコード: 商品を識別する業務上のコード。"
                            ; previous = ""
                        }
                    }
                }
            }
            ; PRODUCT_CATEGORY = map:{
                ; tableName = PRODUCT_CATEGORY
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。"
                    ; previous = "null"
                }
                ; columnDiff = map:{
                    ; PRODUCT_CATEGORY_CODE = map:{
                        ; columnName = PRODUCT_CATEGORY_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "商品カテゴリコード: "
                            ; previous = ""
                        }
                    }
                    ; PRODUCT_CATEGORY_NAME = map:{
                        ; columnName = PRODUCT_CATEGORY_NAME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "商品カテゴリ名称: "
                            ; previous = ""
                        }
                    }
                    ; PARENT_CATEGORY_CODE = map:{
                        ; columnName = PARENT_CATEGORY_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "親カテゴリコード: 最上位の場合はデータなし。"
                            ; previous = ""
                        }
                    }
                }
            }
            ; PRODUCT_STATUS = map:{
                ; tableName = PRODUCT_STATUS
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "商品ステータス: 商品のステータスを表現する固定的なマスタ。"
                    ; previous = "null"
                }
                ; columnDiff = map:{
                    ; PRODUCT_STATUS_CODE = map:{
                        ; columnName = PRODUCT_STATUS_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "商品ステータスコード: 商品ステータスを識別するコード。"
                            ; previous = ""
                        }
                    }
                }
            }
            ; PURCHASE = map:{
                ; tableName = PURCHASE
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "購入: 一つの商品に対する購入を表現する。
実業務であれば購入詳細というテーブルを作り、「購入という行為」と「その中身（詳細）」を違う粒度のデータとしてそれぞれ管理するのが一般的と言えるでしょう。というか、注文とか請求とかそういうことを考え始めたらもっと複雑になるはずですが、ExampleDBということで割り切っています。"
                    ; previous = "null"
                }
                ; columnDiff = map:{
                    ; MEMBER_ID = map:{
                        ; columnName = MEMBER_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。"
                            ; previous = ""
                        }
                    }
                    ; PRODUCT_ID = map:{
                        ; columnName = PRODUCT_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "商品ID: 商品を参照するID。"
                            ; previous = ""
                        }
                    }
                    ; PURCHASE_DATETIME = map:{
                        ; columnName = PURCHASE_DATETIME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "購入日時: 購入した瞬間の日時。"
                            ; previous = ""
                        }
                    }
                    ; PURCHASE_COUNT = map:{
                        ; columnName = PURCHASE_COUNT
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "購入数量: 購入した商品の（一回の購入における）数量。"
                            ; previous = ""
                        }
                    }
                    ; PURCHASE_PRICE = map:{
                        ; columnName = PURCHASE_PRICE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。"
                            ; previous = ""
                        }
                    }
                    ; PAYMENT_COMPLETE_FLG = map:{
                        ; columnName = PAYMENT_COMPLETE_FLG
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "支払完了フラグ: この購入に関しての支払いが完了しているか否か。"
                            ; previous = ""
                        }
                    }
                }
            }
            ; REGION = map:{
                ; tableName = REGION
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。
業務的one-to-oneの親テーブル。"
                    ; previous = "null"
                }
                ; columnDiff = map:{
                    ; REGION_ID = map:{
                        ; columnName = REGION_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "地域ID: 地域を識別するID。
珍しく(固定的な)マスタテーブルとしては数値だが、
Exampleなのでやはり色々なパターンがないと。"
                            ; previous = ""
                        }
                    }
                    ; REGION_NAME = map:{
                        ; columnName = REGION_NAME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "地域名称: 地域を表す名称。"
                            ; previous = ""
                        }
                    }
                }
            }
            ; SERVICE_RANK = map:{
                ; tableName = SERVICE_RANK
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）"
                    ; previous = "null"
                }
                ; columnDiff = map:{
                    ; SERVICE_RANK_CODE = map:{
                        ; columnName = SERVICE_RANK_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "サービスランクコード: サービスランクを識別するコード。"
                            ; previous = ""
                        }
                    }
                    ; SERVICE_RANK_NAME = map:{
                        ; columnName = SERVICE_RANK_NAME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）"
                            ; previous = ""
                        }
                    }
                    ; SERVICE_POINT_INCIDENCE = map:{
                        ; columnName = SERVICE_POINT_INCIDENCE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。
ExampleDBとして数少ない貴重な小数点ありのカラム。"
                            ; previous = ""
                        }
                    }
                    ; NEW_ACCEPTABLE_FLG = map:{
                        ; columnName = NEW_ACCEPTABLE_FLG
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。"
                            ; previous = ""
                        }
                    }
                    ; DESCRIPTION = map:{
                        ; columnName = DESCRIPTION
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "説明: ランクに関する業務的な説明。"
                            ; previous = ""
                        }
                    }
                    ; DISPLAY_ORDER = map:{
                        ; columnName = DISPLAY_ORDER
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "表示順: UI上の表示順を表現する番号。"
                            ; previous = ""
                        }
                    }
                }
            }
            ; WITHDRAWAL_REASON = map:{
                ; tableName = WITHDRAWAL_REASON
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "退会理由: 会員に選ばせる定型的な退会理由のマスタ。"
                    ; previous = "null"
                }
                ; columnDiff = map:{
                    ; WITHDRAWAL_REASON_CODE = map:{
                        ; columnName = WITHDRAWAL_REASON_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "退会理由コード: "
                            ; previous = ""
                        }
                    }
                    ; WITHDRAWAL_REASON_TEXT = map:{
                        ; columnName = WITHDRAWAL_REASON_TEXT
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。"
                            ; previous = ""
                        }
                    }
                }
            }
        }
    }
    ; 2012/03/05 13:05:22 = map:{
        ; diffDate = 2012/03/05 13:05:22
        ; tableCount = map:{
            ; next = 14
            ; previous = 20
        }
        ; tableDiff = map:{
            ; MEMBER = map:{
                ; tableName = MEMBER
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "null"
                    ; previous = "会員: 会員登録時にデータが登録される。基本的に物理削除はなく、退会したらステータスが退会会員になる。ライフサイクルやカテゴリの違う会員それぞれの詳細情報は、別途 one-to-one のテーブルに。"
                }
                ; columnDiff = map:{
                    ; MEMBER_ID = map:{
                        ; columnName = MEMBER_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "会員ID: 会員を識別するID。連番として自動採番される。
（会員IDだけに限らず）採番方法はDBMS次第。"
                        }
                    }
                    ; MEMBER_NAME = map:{
                        ; columnName = MEMBER_NAME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "会員名称: 会員のフルネームの名称。
苗字と名前を分けて管理することも多いが、ここでは Example なので単純にひとまとめ。"
                        }
                    }
                    ; MEMBER_ACCOUNT = map:{
                        ; columnName = MEMBER_ACCOUNT
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "会員アカウント: 会員がログイン時に利用するアカウントNO。
昨今、メールアドレスをログインIDとすることが多いので、あまり見かけなくないかも。"
                        }
                    }
                    ; MEMBER_STATUS_CODE = map:{
                        ; columnName = MEMBER_STATUS_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "会員ステータスコード: 会員ステータスを参照するコード。
ステータスが変わるたびに、このカラムが更新される。"
                        }
                    }
                    ; FORMALIZED_DATETIME = map:{
                        ; columnName = FORMALIZED_DATETIME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "正式会員日時: 会員が正式に確定した日時。
一度確定したら更新されない。"
                        }
                    }
                    ; BIRTHDATE = map:{
                        ; columnName = BIRTHDATE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "生年月日: 必須項目ではないので、このデータがない会員もいる。"
                        }
                    }
                    ; REGISTER_DATETIME = map:{
                        ; columnName = REGISTER_DATETIME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "登録日時: レコードが登録された日時。
会員が登録された日時とほぼ等しいが、そういった業務的な役割を兼務させるのはあまり推奨されない。
どのテーブルでも同じなので、共通カラムの説明はこのテーブルでしか書かない。"
                        }
                    }
                    ; REGISTER_USER = map:{
                        ; columnName = REGISTER_USER
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "登録ユーザ: レコードを登録したユーザ。
会員テーブルであれば当然、会員自身であるはずだが、他のテーブルの場合では管理画面から運用者による登録など考えられるので、しっかり保持しておく。"
                        }
                    }
                    ; UPDATE_DATETIME = map:{
                        ; columnName = UPDATE_DATETIME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "更新日時: レコードが（最後に）更新された日時。
業務的な利用はあまり推奨されないと別項目で説明したが、このカラムはソートの要素としてよく利用される。"
                        }
                    }
                    ; UPDATE_USER = map:{
                        ; columnName = UPDATE_USER
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "更新ユーザ: レコードを更新したユーザ。
システムは誰が何をしたのかちゃんと覚えている。"
                        }
                    }
                    ; VERSION_NO = map:{
                        ; columnName = VERSION_NO
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。"
                        }
                    }
                }
            }
            ; MEMBER_ADDRESS = map:{
                ; tableName = MEMBER_ADDRESS
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "null"
                    ; previous = "会員住所情報: 会員の住所に関する情報で、同時に有効期間ごとに履歴管理されている。
会員を基点に考えた場合、構造的にはone-to-many だが、業務的な定型条件でone-to-one になる。このような構造を「業務的one-to-one」と呼ぶ。
有効期間は隙間なく埋められるが、ここでは住所情報のない会員も存在し、厳密には(業務的な) "1 : 0...1" である。"
                }
                ; columnDiff = map:{
                    ; MEMBER_ADDRESS_ID = map:{
                        ; columnName = MEMBER_ADDRESS_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。"
                        }
                    }
                    ; MEMBER_ID = map:{
                        ; columnName = MEMBER_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。
有効開始日と合わせて複合ユニーク制約となるが、
厳密には完全な制約にはなっていない。
有効期間の概念はRDBでは表現しきれないのである。"
                        }
                    }
                    ; VALID_BEGIN_DATE = map:{
                        ; columnName = VALID_BEGIN_DATE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。"
                        }
                    }
                    ; VALID_END_DATE = map:{
                        ; columnName = VALID_END_DATE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。"
                        }
                    }
                    ; ADDRESS = map:{
                        ; columnName = ADDRESS
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "住所: まるごと住所"
                        }
                    }
                    ; REGION_ID = map:{
                        ; columnName = REGION_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。
（業務的one-to-oneの親テーブルの表現したかっ...）"
                        }
                    }
                }
            }
            ; MEMBER_LOGIN = map:{
                ; tableName = MEMBER_LOGIN
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "null"
                    ; previous = "会員ログイン: ログインするたびに登録されるログイン履歴。
登録されたら更新されるも削除されることもない。さらには登録する人もプログラムもはっきりしているので、ここでは共通カラムは(紙面の都合上もあって)省略している。"
                }
                ; columnDiff = map:{
                    ; MEMBER_LOGIN_ID = map:{
                        ; columnName = MEMBER_LOGIN_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "会員ログインID: "
                        }
                    }
                    ; MEMBER_ID = map:{
                        ; columnName = MEMBER_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "会員ID: "
                        }
                    }
                    ; LOGIN_DATETIME = map:{
                        ; columnName = LOGIN_DATETIME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "ログイン日時: ログインした瞬間の日時。"
                        }
                    }
                    ; MOBILE_LOGIN_FLG = map:{
                        ; columnName = MOBILE_LOGIN_FLG
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "モバイルログインフラグ: モバイル機器からのログインか否か。"
                        }
                    }
                    ; LOGIN_MEMBER_STATUS_CODE = map:{
                        ; columnName = LOGIN_MEMBER_STATUS_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "ログイン会員ステータスコード: ログイン時の会員ステータス"
                        }
                    }
                }
            }
            ; MEMBER_SECURITY = map:{
                ; tableName = MEMBER_SECURITY
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "null"
                    ; previous = "会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある"
                }
                ; columnDiff = map:{
                    ; MEMBER_ID = map:{
                        ; columnName = MEMBER_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "会員ID: そのまま one-to-one を構成するためのFKとなる。"
                        }
                    }
                    ; LOGIN_PASSWORD = map:{
                        ; columnName = LOGIN_PASSWORD
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。"
                        }
                    }
                    ; REMINDER_QUESTION = map:{
                        ; columnName = REMINDER_QUESTION
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。"
                        }
                    }
                    ; REMINDER_ANSWER = map:{
                        ; columnName = REMINDER_ANSWER
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。"
                        }
                    }
                    ; REMINDER_USE_COUNT = map:{
                        ; columnName = REMINDER_USE_COUNT
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "リマインダ利用回数: リマインダを利用した回数。
多いと忘れっぽい会員と言えるが、
そんなことを知ってもしょうがない。"
                        }
                    }
                }
            }
            ; MEMBER_SERVICE = map:{
                ; tableName = MEMBER_SERVICE
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "null"
                    ; previous = "会員サービス: 会員のサービス情報（ポイントサービスなど）。
ExampleDBとして、あえて統一性を崩してユニーク制約経由の one-to-one を表現している。"
                }
                ; columnDiff = map:{
                    ; MEMBER_SERVICE_ID = map:{
                        ; columnName = MEMBER_SERVICE_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "会員サービスID: 独立した主キーとなるが、実質的に会員IDとは one-to-one である。"
                        }
                    }
                    ; MEMBER_ID = map:{
                        ; columnName = MEMBER_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。"
                        }
                    }
                    ; SERVICE_POINT_COUNT = map:{
                        ; columnName = SERVICE_POINT_COUNT
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。"
                        }
                    }
                    ; SERVICE_RANK_CODE = map:{
                        ; columnName = SERVICE_RANK_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。"
                        }
                    }
                }
            }
            ; MEMBER_STATUS = map:{
                ; tableName = MEMBER_STATUS
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "null"
                    ; previous = "会員ステータス: 会員のステータスを示す固定的なマスタテーブル。
業務で増えることはなく、増減するときは実装もともなうレベルの業務変更と考えられる。

こういった固定的なマスタテーブルには、更新日時などの共通カラムは定義していないが、業務上そういった情報を管理する必要性が低いという理由に加え、ExampleDBとして共通カラムでER図が埋め尽くされてしまい見づらくなるという
ところで割り切っている。実業務では統一的に定義することもある。"
                }
                ; columnDiff = map:{
                    ; MEMBER_STATUS_CODE = map:{
                        ; columnName = MEMBER_STATUS_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "会員ステータスコード: 会員ステータスを識別するコード。
固定的なデータなので、連番とか番号にはせず、
データを直接見たときも人が直感的にわかるように、
このような３桁のコード形式にしている。
"
                        }
                    }
                    ; MEMBER_STATUS_NAME = map:{
                        ; columnName = MEMBER_STATUS_NAME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "会員ステータス名称: "
                        }
                    }
                    ; DESCRIPTION = map:{
                        ; columnName = DESCRIPTION
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。"
                        }
                    }
                    ; DISPLAY_ORDER = map:{
                        ; columnName = DISPLAY_ORDER
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。"
                        }
                    }
                }
            }
            ; MEMBER_WITHDRAWAL = map:{
                ; tableName = MEMBER_WITHDRAWAL
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "null"
                    ; previous = "会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。（"1 : 0...1" のパターンの one-to-one）
共通カラムがあってバージョンNOがないパターン。基本的に更新が入ることはないが、登録ユーザを保持したいのと、重要なデータなので更新系の情報も。"
                }
                ; columnDiff = map:{
                    ; WITHDRAWAL_REASON_CODE = map:{
                        ; columnName = WITHDRAWAL_REASON_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。"
                        }
                    }
                    ; WITHDRAWAL_REASON_INPUT_TEXT = map:{
                        ; columnName = WITHDRAWAL_REASON_INPUT_TEXT
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。
サイト運営側としては真摯に受け止めて改善していきたい。"
                        }
                    }
                    ; WITHDRAWAL_DATETIME = map:{
                        ; columnName = WITHDRAWAL_DATETIME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。"
                        }
                    }
                }
            }
            ; PRODUCT = map:{
                ; tableName = PRODUCT
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "null"
                    ; previous = "商品: "
                }
                ; columnDiff = map:{
                    ; PRODUCT_NAME = map:{
                        ; columnName = PRODUCT_NAME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "商品名称: ExampleDBとして、コメントの少ないケースを表現するため、
あえてコメントを控えている。実業務ではしっかりとコメントを
入れることが強く強く推奨される。"
                        }
                    }
                    ; PRODUCT_HANDLE_CODE = map:{
                        ; columnName = PRODUCT_HANDLE_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "商品ハンドルコード: 商品を識別する業務上のコード。"
                        }
                    }
                }
            }
            ; PRODUCT_CATEGORY = map:{
                ; tableName = PRODUCT_CATEGORY
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "null"
                    ; previous = "商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。"
                }
                ; columnDiff = map:{
                    ; PRODUCT_CATEGORY_CODE = map:{
                        ; columnName = PRODUCT_CATEGORY_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "商品カテゴリコード: "
                        }
                    }
                    ; PRODUCT_CATEGORY_NAME = map:{
                        ; columnName = PRODUCT_CATEGORY_NAME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "商品カテゴリ名称: "
                        }
                    }
                    ; PARENT_CATEGORY_CODE = map:{
                        ; columnName = PARENT_CATEGORY_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "親カテゴリコード: 最上位の場合はデータなし。"
                        }
                    }
                }
            }
            ; PRODUCT_STATUS = map:{
                ; tableName = PRODUCT_STATUS
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "null"
                    ; previous = "商品ステータス: 商品のステータスを表現する固定的なマスタ。"
                }
                ; columnDiff = map:{
                    ; PRODUCT_STATUS_CODE = map:{
                        ; columnName = PRODUCT_STATUS_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "商品ステータスコード: 商品ステータスを識別するコード。"
                        }
                    }
                }
            }
            ; PURCHASE = map:{
                ; tableName = PURCHASE
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "null"
                    ; previous = "購入: 一つの商品に対する購入を表現する。
実業務であれば購入詳細というテーブルを作り、「購入という行為」と「その中身（詳細）」を違う粒度のデータとしてそれぞれ管理するのが一般的と言えるでしょう。というか、注文とか請求とかそういうことを考え始めたらもっと複雑になるはずですが、ExampleDBということで割り切っています。"
                }
                ; columnDiff = map:{
                    ; MEMBER_ID = map:{
                        ; columnName = MEMBER_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。"
                        }
                    }
                    ; PRODUCT_ID = map:{
                        ; columnName = PRODUCT_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "商品ID: 商品を参照するID。"
                        }
                    }
                    ; PURCHASE_DATETIME = map:{
                        ; columnName = PURCHASE_DATETIME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "購入日時: 購入した瞬間の日時。"
                        }
                    }
                    ; PURCHASE_COUNT = map:{
                        ; columnName = PURCHASE_COUNT
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "購入数量: 購入した商品の（一回の購入における）数量。"
                        }
                    }
                    ; PURCHASE_PRICE = map:{
                        ; columnName = PURCHASE_PRICE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。"
                        }
                    }
                    ; PAYMENT_COMPLETE_FLG = map:{
                        ; columnName = PAYMENT_COMPLETE_FLG
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "支払完了フラグ: この購入に関しての支払いが完了しているか否か。"
                        }
                    }
                }
            }
            ; REGION = map:{
                ; tableName = REGION
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "null"
                    ; previous = "地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。
業務的one-to-oneの親テーブル。"
                }
                ; columnDiff = map:{
                    ; REGION_ID = map:{
                        ; columnName = REGION_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "地域ID: 地域を識別するID。
珍しく(固定的な)マスタテーブルとしては数値だが、
Exampleなのでやはり色々なパターンがないと。"
                        }
                    }
                    ; REGION_NAME = map:{
                        ; columnName = REGION_NAME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "地域名称: 地域を表す名称。"
                        }
                    }
                }
            }
            ; SERVICE_RANK = map:{
                ; tableName = SERVICE_RANK
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "null"
                    ; previous = "サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）"
                }
                ; columnDiff = map:{
                    ; SERVICE_RANK_CODE = map:{
                        ; columnName = SERVICE_RANK_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "サービスランクコード: サービスランクを識別するコード。"
                        }
                    }
                    ; SERVICE_RANK_NAME = map:{
                        ; columnName = SERVICE_RANK_NAME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）"
                        }
                    }
                    ; SERVICE_POINT_INCIDENCE = map:{
                        ; columnName = SERVICE_POINT_INCIDENCE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。
ExampleDBとして数少ない貴重な小数点ありのカラム。"
                        }
                    }
                    ; NEW_ACCEPTABLE_FLG = map:{
                        ; columnName = NEW_ACCEPTABLE_FLG
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。"
                        }
                    }
                    ; DESCRIPTION = map:{
                        ; columnName = DESCRIPTION
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "説明: ランクに関する業務的な説明。"
                        }
                    }
                    ; DISPLAY_ORDER = map:{
                        ; columnName = DISPLAY_ORDER
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "表示順: UI上の表示順を表現する番号。"
                        }
                    }
                }
            }
            ; WITHDRAWAL_REASON = map:{
                ; tableName = WITHDRAWAL_REASON
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "null"
                    ; previous = "退会理由: 会員に選ばせる定型的な退会理由のマスタ。"
                }
                ; columnDiff = map:{
                    ; WITHDRAWAL_REASON_CODE = map:{
                        ; columnName = WITHDRAWAL_REASON_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "退会理由コード: "
                        }
                    }
                    ; WITHDRAWAL_REASON_TEXT = map:{
                        ; columnName = WITHDRAWAL_REASON_TEXT
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。"
                        }
                    }
                }
            }
            ; VENDOR_$_DOLLAR = map:{
                ; tableName = VENDOR_$_DOLLAR
                ; diffType = DELETE
            }
            ; VENDOR_CHECK = map:{
                ; tableName = VENDOR_CHECK
                ; diffType = DELETE
            }
            ; VENDOR_THE_LONG_AND_WINDING_TABLE_AND_COLUMN = map:{
                ; tableName = VENDOR_THE_LONG_AND_WINDING_TABLE_AND_COLUMN
                ; diffType = DELETE
            }
            ; VENDOR_THE_LONG_AND_WINDING_TABLE_AND_COLUMN_REF = map:{
                ; tableName = VENDOR_THE_LONG_AND_WINDING_TABLE_AND_COLUMN_REF
                ; diffType = DELETE
            }
            ; SUMMARY_PRODUCT = map:{
                ; tableName = SUMMARY_PRODUCT
                ; diffType = DELETE
            }
            ; SUMMARY_WITHDRAWAL = map:{
                ; tableName = SUMMARY_WITHDRAWAL
                ; diffType = DELETE
            }
        }
    }
    ; 2012/03/05 12:59:17 = map:{
        ; diffDate = 2012/03/05 12:59:17
        ; tableCount = map:{
            ; next = 20
            ; previous = 14
        }
        ; tableDiff = map:{
            ; VENDOR_$_DOLLAR = map:{
                ; tableName = VENDOR_$_DOLLAR
                ; diffType = ADD
            }
            ; VENDOR_CHECK = map:{
                ; tableName = VENDOR_CHECK
                ; diffType = ADD
            }
            ; VENDOR_THE_LONG_AND_WINDING_TABLE_AND_COLUMN = map:{
                ; tableName = VENDOR_THE_LONG_AND_WINDING_TABLE_AND_COLUMN
                ; diffType = ADD
            }
            ; VENDOR_THE_LONG_AND_WINDING_TABLE_AND_COLUMN_REF = map:{
                ; tableName = VENDOR_THE_LONG_AND_WINDING_TABLE_AND_COLUMN_REF
                ; diffType = ADD
            }
            ; SUMMARY_PRODUCT = map:{
                ; tableName = SUMMARY_PRODUCT
                ; diffType = ADD
            }
            ; SUMMARY_WITHDRAWAL = map:{
                ; tableName = SUMMARY_WITHDRAWAL
                ; diffType = ADD
            }
            ; MEMBER = map:{
                ; tableName = MEMBER
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "会員: 会員登録時にデータが登録される。基本的に物理削除はなく、退会したらステータスが退会会員になる。ライフサイクルやカテゴリの違う会員それぞれの詳細情報は、別途 one-to-one のテーブルに。"
                    ; previous = "null"
                }
                ; columnDiff = map:{
                    ; MEMBER_ID = map:{
                        ; columnName = MEMBER_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "会員ID: 会員を識別するID。連番として自動採番される。
（会員IDだけに限らず）採番方法はDBMS次第。"
                            ; previous = ""
                        }
                    }
                    ; MEMBER_NAME = map:{
                        ; columnName = MEMBER_NAME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "会員名称: 会員のフルネームの名称。
苗字と名前を分けて管理することも多いが、ここでは Example なので単純にひとまとめ。"
                            ; previous = ""
                        }
                    }
                    ; MEMBER_ACCOUNT = map:{
                        ; columnName = MEMBER_ACCOUNT
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "会員アカウント: 会員がログイン時に利用するアカウントNO。
昨今、メールアドレスをログインIDとすることが多いので、あまり見かけなくないかも。"
                            ; previous = ""
                        }
                    }
                    ; MEMBER_STATUS_CODE = map:{
                        ; columnName = MEMBER_STATUS_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "会員ステータスコード: 会員ステータスを参照するコード。
ステータスが変わるたびに、このカラムが更新される。"
                            ; previous = ""
                        }
                    }
                    ; FORMALIZED_DATETIME = map:{
                        ; columnName = FORMALIZED_DATETIME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "正式会員日時: 会員が正式に確定した日時。
一度確定したら更新されない。"
                            ; previous = ""
                        }
                    }
                    ; BIRTHDATE = map:{
                        ; columnName = BIRTHDATE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "生年月日: 必須項目ではないので、このデータがない会員もいる。"
                            ; previous = ""
                        }
                    }
                    ; REGISTER_DATETIME = map:{
                        ; columnName = REGISTER_DATETIME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "登録日時: レコードが登録された日時。
会員が登録された日時とほぼ等しいが、そういった業務的な役割を兼務させるのはあまり推奨されない。
どのテーブルでも同じなので、共通カラムの説明はこのテーブルでしか書かない。"
                            ; previous = ""
                        }
                    }
                    ; REGISTER_USER = map:{
                        ; columnName = REGISTER_USER
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "登録ユーザ: レコードを登録したユーザ。
会員テーブルであれば当然、会員自身であるはずだが、他のテーブルの場合では管理画面から運用者による登録など考えられるので、しっかり保持しておく。"
                            ; previous = ""
                        }
                    }
                    ; UPDATE_DATETIME = map:{
                        ; columnName = UPDATE_DATETIME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "更新日時: レコードが（最後に）更新された日時。
業務的な利用はあまり推奨されないと別項目で説明したが、このカラムはソートの要素としてよく利用される。"
                            ; previous = ""
                        }
                    }
                    ; UPDATE_USER = map:{
                        ; columnName = UPDATE_USER
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "更新ユーザ: レコードを更新したユーザ。
システムは誰が何をしたのかちゃんと覚えている。"
                            ; previous = ""
                        }
                    }
                    ; VERSION_NO = map:{
                        ; columnName = VERSION_NO
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。"
                            ; previous = ""
                        }
                    }
                }
            }
            ; MEMBER_ADDRESS = map:{
                ; tableName = MEMBER_ADDRESS
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "会員住所情報: 会員の住所に関する情報で、同時に有効期間ごとに履歴管理されている。
会員を基点に考えた場合、構造的にはone-to-many だが、業務的な定型条件でone-to-one になる。このような構造を「業務的one-to-one」と呼ぶ。
有効期間は隙間なく埋められるが、ここでは住所情報のない会員も存在し、厳密には(業務的な) "1 : 0...1" である。"
                    ; previous = "null"
                }
                ; columnDiff = map:{
                    ; MEMBER_ADDRESS_ID = map:{
                        ; columnName = MEMBER_ADDRESS_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。"
                            ; previous = ""
                        }
                    }
                    ; MEMBER_ID = map:{
                        ; columnName = MEMBER_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。
有効開始日と合わせて複合ユニーク制約となるが、
厳密には完全な制約にはなっていない。
有効期間の概念はRDBでは表現しきれないのである。"
                            ; previous = ""
                        }
                    }
                    ; VALID_BEGIN_DATE = map:{
                        ; columnName = VALID_BEGIN_DATE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。"
                            ; previous = ""
                        }
                    }
                    ; VALID_END_DATE = map:{
                        ; columnName = VALID_END_DATE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。"
                            ; previous = ""
                        }
                    }
                    ; ADDRESS = map:{
                        ; columnName = ADDRESS
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "住所: まるごと住所"
                            ; previous = ""
                        }
                    }
                    ; REGION_ID = map:{
                        ; columnName = REGION_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。
（業務的one-to-oneの親テーブルの表現したかっ...）"
                            ; previous = ""
                        }
                    }
                }
            }
            ; MEMBER_LOGIN = map:{
                ; tableName = MEMBER_LOGIN
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "会員ログイン: ログインするたびに登録されるログイン履歴。
登録されたら更新されるも削除されることもない。さらには登録する人もプログラムもはっきりしているので、ここでは共通カラムは(紙面の都合上もあって)省略している。"
                    ; previous = "null"
                }
                ; columnDiff = map:{
                    ; MEMBER_LOGIN_ID = map:{
                        ; columnName = MEMBER_LOGIN_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "会員ログインID: "
                            ; previous = ""
                        }
                    }
                    ; MEMBER_ID = map:{
                        ; columnName = MEMBER_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "会員ID: "
                            ; previous = ""
                        }
                    }
                    ; LOGIN_DATETIME = map:{
                        ; columnName = LOGIN_DATETIME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "ログイン日時: ログインした瞬間の日時。"
                            ; previous = ""
                        }
                    }
                    ; MOBILE_LOGIN_FLG = map:{
                        ; columnName = MOBILE_LOGIN_FLG
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "モバイルログインフラグ: モバイル機器からのログインか否か。"
                            ; previous = ""
                        }
                    }
                    ; LOGIN_MEMBER_STATUS_CODE = map:{
                        ; columnName = LOGIN_MEMBER_STATUS_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "ログイン会員ステータスコード: ログイン時の会員ステータス"
                            ; previous = ""
                        }
                    }
                }
            }
            ; MEMBER_SECURITY = map:{
                ; tableName = MEMBER_SECURITY
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある"
                    ; previous = "null"
                }
                ; columnDiff = map:{
                    ; MEMBER_ID = map:{
                        ; columnName = MEMBER_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "会員ID: そのまま one-to-one を構成するためのFKとなる。"
                            ; previous = ""
                        }
                    }
                    ; LOGIN_PASSWORD = map:{
                        ; columnName = LOGIN_PASSWORD
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。"
                            ; previous = ""
                        }
                    }
                    ; REMINDER_QUESTION = map:{
                        ; columnName = REMINDER_QUESTION
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。"
                            ; previous = ""
                        }
                    }
                    ; REMINDER_ANSWER = map:{
                        ; columnName = REMINDER_ANSWER
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。"
                            ; previous = ""
                        }
                    }
                    ; REMINDER_USE_COUNT = map:{
                        ; columnName = REMINDER_USE_COUNT
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "リマインダ利用回数: リマインダを利用した回数。
多いと忘れっぽい会員と言えるが、
そんなことを知ってもしょうがない。"
                            ; previous = ""
                        }
                    }
                }
            }
            ; MEMBER_SERVICE = map:{
                ; tableName = MEMBER_SERVICE
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "会員サービス: 会員のサービス情報（ポイントサービスなど）。
ExampleDBとして、あえて統一性を崩してユニーク制約経由の one-to-one を表現している。"
                    ; previous = "null"
                }
                ; columnDiff = map:{
                    ; MEMBER_SERVICE_ID = map:{
                        ; columnName = MEMBER_SERVICE_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "会員サービスID: 独立した主キーとなるが、実質的に会員IDとは one-to-one である。"
                            ; previous = ""
                        }
                    }
                    ; MEMBER_ID = map:{
                        ; columnName = MEMBER_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。"
                            ; previous = ""
                        }
                    }
                    ; SERVICE_POINT_COUNT = map:{
                        ; columnName = SERVICE_POINT_COUNT
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。"
                            ; previous = ""
                        }
                    }
                    ; SERVICE_RANK_CODE = map:{
                        ; columnName = SERVICE_RANK_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。"
                            ; previous = ""
                        }
                    }
                }
            }
            ; MEMBER_STATUS = map:{
                ; tableName = MEMBER_STATUS
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "会員ステータス: 会員のステータスを示す固定的なマスタテーブル。
業務で増えることはなく、増減するときは実装もともなうレベルの業務変更と考えられる。

こういった固定的なマスタテーブルには、更新日時などの共通カラムは定義していないが、業務上そういった情報を管理する必要性が低いという理由に加え、ExampleDBとして共通カラムでER図が埋め尽くされてしまい見づらくなるという
ところで割り切っている。実業務では統一的に定義することもある。"
                    ; previous = "null"
                }
                ; columnDiff = map:{
                    ; MEMBER_STATUS_CODE = map:{
                        ; columnName = MEMBER_STATUS_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "会員ステータスコード: 会員ステータスを識別するコード。
固定的なデータなので、連番とか番号にはせず、
データを直接見たときも人が直感的にわかるように、
このような３桁のコード形式にしている。
"
                            ; previous = ""
                        }
                    }
                    ; MEMBER_STATUS_NAME = map:{
                        ; columnName = MEMBER_STATUS_NAME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "会員ステータス名称: "
                            ; previous = ""
                        }
                    }
                    ; DESCRIPTION = map:{
                        ; columnName = DESCRIPTION
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。"
                            ; previous = ""
                        }
                    }
                    ; DISPLAY_ORDER = map:{
                        ; columnName = DISPLAY_ORDER
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。"
                            ; previous = ""
                        }
                    }
                }
            }
            ; MEMBER_WITHDRAWAL = map:{
                ; tableName = MEMBER_WITHDRAWAL
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。（"1 : 0...1" のパターンの one-to-one）
共通カラムがあってバージョンNOがないパターン。基本的に更新が入ることはないが、登録ユーザを保持したいのと、重要なデータなので更新系の情報も。"
                    ; previous = "null"
                }
                ; columnDiff = map:{
                    ; WITHDRAWAL_REASON_CODE = map:{
                        ; columnName = WITHDRAWAL_REASON_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。"
                            ; previous = ""
                        }
                    }
                    ; WITHDRAWAL_REASON_INPUT_TEXT = map:{
                        ; columnName = WITHDRAWAL_REASON_INPUT_TEXT
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。
サイト運営側としては真摯に受け止めて改善していきたい。"
                            ; previous = ""
                        }
                    }
                    ; WITHDRAWAL_DATETIME = map:{
                        ; columnName = WITHDRAWAL_DATETIME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。"
                            ; previous = ""
                        }
                    }
                }
            }
            ; PRODUCT = map:{
                ; tableName = PRODUCT
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "商品: "
                    ; previous = "null"
                }
                ; columnDiff = map:{
                    ; PRODUCT_NAME = map:{
                        ; columnName = PRODUCT_NAME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "商品名称: ExampleDBとして、コメントの少ないケースを表現するため、
あえてコメントを控えている。実業務ではしっかりとコメントを
入れることが強く強く推奨される。"
                            ; previous = ""
                        }
                    }
                    ; PRODUCT_HANDLE_CODE = map:{
                        ; columnName = PRODUCT_HANDLE_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "商品ハンドルコード: 商品を識別する業務上のコード。"
                            ; previous = ""
                        }
                    }
                }
            }
            ; PRODUCT_CATEGORY = map:{
                ; tableName = PRODUCT_CATEGORY
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。"
                    ; previous = "null"
                }
                ; columnDiff = map:{
                    ; PRODUCT_CATEGORY_CODE = map:{
                        ; columnName = PRODUCT_CATEGORY_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "商品カテゴリコード: "
                            ; previous = ""
                        }
                    }
                    ; PRODUCT_CATEGORY_NAME = map:{
                        ; columnName = PRODUCT_CATEGORY_NAME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "商品カテゴリ名称: "
                            ; previous = ""
                        }
                    }
                    ; PARENT_CATEGORY_CODE = map:{
                        ; columnName = PARENT_CATEGORY_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "親カテゴリコード: 最上位の場合はデータなし。"
                            ; previous = ""
                        }
                    }
                }
            }
            ; PRODUCT_STATUS = map:{
                ; tableName = PRODUCT_STATUS
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "商品ステータス: 商品のステータスを表現する固定的なマスタ。"
                    ; previous = "null"
                }
                ; columnDiff = map:{
                    ; PRODUCT_STATUS_CODE = map:{
                        ; columnName = PRODUCT_STATUS_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "商品ステータスコード: 商品ステータスを識別するコード。"
                            ; previous = ""
                        }
                    }
                }
            }
            ; PURCHASE = map:{
                ; tableName = PURCHASE
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "購入: 一つの商品に対する購入を表現する。
実業務であれば購入詳細というテーブルを作り、「購入という行為」と「その中身（詳細）」を違う粒度のデータとしてそれぞれ管理するのが一般的と言えるでしょう。というか、注文とか請求とかそういうことを考え始めたらもっと複雑になるはずですが、ExampleDBということで割り切っています。"
                    ; previous = "null"
                }
                ; columnDiff = map:{
                    ; MEMBER_ID = map:{
                        ; columnName = MEMBER_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。"
                            ; previous = ""
                        }
                    }
                    ; PRODUCT_ID = map:{
                        ; columnName = PRODUCT_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "商品ID: 商品を参照するID。"
                            ; previous = ""
                        }
                    }
                    ; PURCHASE_DATETIME = map:{
                        ; columnName = PURCHASE_DATETIME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "購入日時: 購入した瞬間の日時。"
                            ; previous = ""
                        }
                    }
                    ; PURCHASE_COUNT = map:{
                        ; columnName = PURCHASE_COUNT
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "購入数量: 購入した商品の（一回の購入における）数量。"
                            ; previous = ""
                        }
                    }
                    ; PURCHASE_PRICE = map:{
                        ; columnName = PURCHASE_PRICE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。"
                            ; previous = ""
                        }
                    }
                    ; PAYMENT_COMPLETE_FLG = map:{
                        ; columnName = PAYMENT_COMPLETE_FLG
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "支払完了フラグ: この購入に関しての支払いが完了しているか否か。"
                            ; previous = ""
                        }
                    }
                }
            }
            ; REGION = map:{
                ; tableName = REGION
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。
業務的one-to-oneの親テーブル。"
                    ; previous = "null"
                }
                ; columnDiff = map:{
                    ; REGION_ID = map:{
                        ; columnName = REGION_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "地域ID: 地域を識別するID。
珍しく(固定的な)マスタテーブルとしては数値だが、
Exampleなのでやはり色々なパターンがないと。"
                            ; previous = ""
                        }
                    }
                    ; REGION_NAME = map:{
                        ; columnName = REGION_NAME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "地域名称: 地域を表す名称。"
                            ; previous = ""
                        }
                    }
                }
            }
            ; SERVICE_RANK = map:{
                ; tableName = SERVICE_RANK
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）"
                    ; previous = "null"
                }
                ; columnDiff = map:{
                    ; SERVICE_RANK_CODE = map:{
                        ; columnName = SERVICE_RANK_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "サービスランクコード: サービスランクを識別するコード。"
                            ; previous = ""
                        }
                    }
                    ; SERVICE_RANK_NAME = map:{
                        ; columnName = SERVICE_RANK_NAME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）"
                            ; previous = ""
                        }
                    }
                    ; SERVICE_POINT_INCIDENCE = map:{
                        ; columnName = SERVICE_POINT_INCIDENCE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。
ExampleDBとして数少ない貴重な小数点ありのカラム。"
                            ; previous = ""
                        }
                    }
                    ; NEW_ACCEPTABLE_FLG = map:{
                        ; columnName = NEW_ACCEPTABLE_FLG
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。"
                            ; previous = ""
                        }
                    }
                    ; DESCRIPTION = map:{
                        ; columnName = DESCRIPTION
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "説明: ランクに関する業務的な説明。"
                            ; previous = ""
                        }
                    }
                    ; DISPLAY_ORDER = map:{
                        ; columnName = DISPLAY_ORDER
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "表示順: UI上の表示順を表現する番号。"
                            ; previous = ""
                        }
                    }
                }
            }
            ; WITHDRAWAL_REASON = map:{
                ; tableName = WITHDRAWAL_REASON
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "退会理由: 会員に選ばせる定型的な退会理由のマスタ。"
                    ; previous = "null"
                }
                ; columnDiff = map:{
                    ; WITHDRAWAL_REASON_CODE = map:{
                        ; columnName = WITHDRAWAL_REASON_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "退会理由コード: "
                            ; previous = ""
                        }
                    }
                    ; WITHDRAWAL_REASON_TEXT = map:{
                        ; columnName = WITHDRAWAL_REASON_TEXT
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = "退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。"
                            ; previous = ""
                        }
                    }
                }
            }
        }
    }
    ; 2012/03/05 12:43:50 = map:{
        ; diffDate = 2012/03/05 12:43:50
        ; tableCount = map:{
            ; next = 14
            ; previous = 20
        }
        ; tableDiff = map:{
            ; MEMBER = map:{
                ; tableName = MEMBER
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "null"
                    ; previous = "会員: 会員登録時にデータが登録される。基本的に物理削除はなく、退会したらステータスが退会会員になる。ライフサイクルやカテゴリの違う会員それぞれの詳細情報は、別途 one-to-one のテーブルに。"
                }
                ; columnDiff = map:{
                    ; MEMBER_ID = map:{
                        ; columnName = MEMBER_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "会員ID: 会員を識別するID。連番として自動採番される。
（会員IDだけに限らず）採番方法はDBMS次第。"
                        }
                    }
                    ; MEMBER_NAME = map:{
                        ; columnName = MEMBER_NAME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "会員名称: 会員のフルネームの名称。
苗字と名前を分けて管理することも多いが、ここでは Example なので単純にひとまとめ。"
                        }
                    }
                    ; MEMBER_ACCOUNT = map:{
                        ; columnName = MEMBER_ACCOUNT
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "会員アカウント: 会員がログイン時に利用するアカウントNO。
昨今、メールアドレスをログインIDとすることが多いので、あまり見かけなくないかも。"
                        }
                    }
                    ; MEMBER_STATUS_CODE = map:{
                        ; columnName = MEMBER_STATUS_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "会員ステータスコード: 会員ステータスを参照するコード。
ステータスが変わるたびに、このカラムが更新される。"
                        }
                    }
                    ; FORMALIZED_DATETIME = map:{
                        ; columnName = FORMALIZED_DATETIME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "正式会員日時: 会員が正式に確定した日時。
一度確定したら更新されない。"
                        }
                    }
                    ; BIRTHDATE = map:{
                        ; columnName = BIRTHDATE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "生年月日: 必須項目ではないので、このデータがない会員もいる。"
                        }
                    }
                    ; REGISTER_DATETIME = map:{
                        ; columnName = REGISTER_DATETIME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "登録日時: レコードが登録された日時。
会員が登録された日時とほぼ等しいが、そういった業務的な役割を兼務させるのはあまり推奨されない。
どのテーブルでも同じなので、共通カラムの説明はこのテーブルでしか書かない。"
                        }
                    }
                    ; REGISTER_USER = map:{
                        ; columnName = REGISTER_USER
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "登録ユーザ: レコードを登録したユーザ。
会員テーブルであれば当然、会員自身であるはずだが、他のテーブルの場合では管理画面から運用者による登録など考えられるので、しっかり保持しておく。"
                        }
                    }
                    ; UPDATE_DATETIME = map:{
                        ; columnName = UPDATE_DATETIME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "更新日時: レコードが（最後に）更新された日時。
業務的な利用はあまり推奨されないと別項目で説明したが、このカラムはソートの要素としてよく利用される。"
                        }
                    }
                    ; UPDATE_USER = map:{
                        ; columnName = UPDATE_USER
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "更新ユーザ: レコードを更新したユーザ。
システムは誰が何をしたのかちゃんと覚えている。"
                        }
                    }
                    ; VERSION_NO = map:{
                        ; columnName = VERSION_NO
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。"
                        }
                    }
                }
            }
            ; MEMBER_ADDRESS = map:{
                ; tableName = MEMBER_ADDRESS
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "null"
                    ; previous = "会員住所情報: 会員の住所に関する情報で、同時に有効期間ごとに履歴管理されている。
会員を基点に考えた場合、構造的にはone-to-many だが、業務的な定型条件でone-to-one になる。このような構造を「業務的one-to-one」と呼ぶ。
有効期間は隙間なく埋められるが、ここでは住所情報のない会員も存在し、厳密には(業務的な) "1 : 0...1" である。"
                }
                ; columnDiff = map:{
                    ; MEMBER_ADDRESS_ID = map:{
                        ; columnName = MEMBER_ADDRESS_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。"
                        }
                    }
                    ; MEMBER_ID = map:{
                        ; columnName = MEMBER_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。
有効開始日と合わせて複合ユニーク制約となるが、
厳密には完全な制約にはなっていない。
有効期間の概念はRDBでは表現しきれないのである。"
                        }
                    }
                    ; VALID_BEGIN_DATE = map:{
                        ; columnName = VALID_BEGIN_DATE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。"
                        }
                    }
                    ; VALID_END_DATE = map:{
                        ; columnName = VALID_END_DATE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。"
                        }
                    }
                    ; ADDRESS = map:{
                        ; columnName = ADDRESS
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "住所: まるごと住所"
                        }
                    }
                    ; REGION_ID = map:{
                        ; columnName = REGION_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。
（業務的one-to-oneの親テーブルの表現したかっ...）"
                        }
                    }
                }
            }
            ; MEMBER_LOGIN = map:{
                ; tableName = MEMBER_LOGIN
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "null"
                    ; previous = "会員ログイン: ログインするたびに登録されるログイン履歴。
登録されたら更新されるも削除されることもない。さらには登録する人もプログラムもはっきりしているので、ここでは共通カラムは(紙面の都合上もあって)省略している。"
                }
                ; columnDiff = map:{
                    ; MEMBER_LOGIN_ID = map:{
                        ; columnName = MEMBER_LOGIN_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "会員ログインID: "
                        }
                    }
                    ; MEMBER_ID = map:{
                        ; columnName = MEMBER_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "会員ID: "
                        }
                    }
                    ; LOGIN_DATETIME = map:{
                        ; columnName = LOGIN_DATETIME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "ログイン日時: ログインした瞬間の日時。"
                        }
                    }
                    ; MOBILE_LOGIN_FLG = map:{
                        ; columnName = MOBILE_LOGIN_FLG
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "モバイルログインフラグ: モバイル機器からのログインか否か。"
                        }
                    }
                    ; LOGIN_MEMBER_STATUS_CODE = map:{
                        ; columnName = LOGIN_MEMBER_STATUS_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "ログイン会員ステータスコード: ログイン時の会員ステータス"
                        }
                    }
                }
            }
            ; MEMBER_SECURITY = map:{
                ; tableName = MEMBER_SECURITY
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "null"
                    ; previous = "会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある"
                }
                ; columnDiff = map:{
                    ; MEMBER_ID = map:{
                        ; columnName = MEMBER_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "会員ID: そのまま one-to-one を構成するためのFKとなる。"
                        }
                    }
                    ; LOGIN_PASSWORD = map:{
                        ; columnName = LOGIN_PASSWORD
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。"
                        }
                    }
                    ; REMINDER_QUESTION = map:{
                        ; columnName = REMINDER_QUESTION
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。"
                        }
                    }
                    ; REMINDER_ANSWER = map:{
                        ; columnName = REMINDER_ANSWER
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。"
                        }
                    }
                    ; REMINDER_USE_COUNT = map:{
                        ; columnName = REMINDER_USE_COUNT
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "リマインダ利用回数: リマインダを利用した回数。
多いと忘れっぽい会員と言えるが、
そんなことを知ってもしょうがない。"
                        }
                    }
                }
            }
            ; MEMBER_SERVICE = map:{
                ; tableName = MEMBER_SERVICE
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "null"
                    ; previous = "会員サービス: 会員のサービス情報（ポイントサービスなど）。
ExampleDBとして、あえて統一性を崩してユニーク制約経由の one-to-one を表現している。"
                }
                ; columnDiff = map:{
                    ; MEMBER_SERVICE_ID = map:{
                        ; columnName = MEMBER_SERVICE_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "会員サービスID: 独立した主キーとなるが、実質的に会員IDとは one-to-one である。"
                        }
                    }
                    ; MEMBER_ID = map:{
                        ; columnName = MEMBER_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。"
                        }
                    }
                    ; SERVICE_POINT_COUNT = map:{
                        ; columnName = SERVICE_POINT_COUNT
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。"
                        }
                    }
                    ; SERVICE_RANK_CODE = map:{
                        ; columnName = SERVICE_RANK_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。"
                        }
                    }
                }
            }
            ; MEMBER_STATUS = map:{
                ; tableName = MEMBER_STATUS
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "null"
                    ; previous = "会員ステータス: 会員のステータスを示す固定的なマスタテーブル。
業務で増えることはなく、増減するときは実装もともなうレベルの業務変更と考えられる。

こういった固定的なマスタテーブルには、更新日時などの共通カラムは定義していないが、業務上そういった情報を管理する必要性が低いという理由に加え、ExampleDBとして共通カラムでER図が埋め尽くされてしまい見づらくなるという
ところで割り切っている。実業務では統一的に定義することもある。"
                }
                ; columnDiff = map:{
                    ; MEMBER_STATUS_CODE = map:{
                        ; columnName = MEMBER_STATUS_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "会員ステータスコード: 会員ステータスを識別するコード。
固定的なデータなので、連番とか番号にはせず、
データを直接見たときも人が直感的にわかるように、
このような３桁のコード形式にしている。
"
                        }
                    }
                    ; MEMBER_STATUS_NAME = map:{
                        ; columnName = MEMBER_STATUS_NAME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "会員ステータス名称: "
                        }
                    }
                    ; DESCRIPTION = map:{
                        ; columnName = DESCRIPTION
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。"
                        }
                    }
                    ; DISPLAY_ORDER = map:{
                        ; columnName = DISPLAY_ORDER
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。"
                        }
                    }
                }
            }
            ; MEMBER_WITHDRAWAL = map:{
                ; tableName = MEMBER_WITHDRAWAL
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "null"
                    ; previous = "会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。（"1 : 0...1" のパターンの one-to-one）
共通カラムがあってバージョンNOがないパターン。基本的に更新が入ることはないが、登録ユーザを保持したいのと、重要なデータなので更新系の情報も。"
                }
                ; columnDiff = map:{
                    ; WITHDRAWAL_REASON_CODE = map:{
                        ; columnName = WITHDRAWAL_REASON_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。"
                        }
                    }
                    ; WITHDRAWAL_REASON_INPUT_TEXT = map:{
                        ; columnName = WITHDRAWAL_REASON_INPUT_TEXT
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。
サイト運営側としては真摯に受け止めて改善していきたい。"
                        }
                    }
                    ; WITHDRAWAL_DATETIME = map:{
                        ; columnName = WITHDRAWAL_DATETIME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。"
                        }
                    }
                }
            }
            ; PRODUCT = map:{
                ; tableName = PRODUCT
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "null"
                    ; previous = "商品: "
                }
                ; columnDiff = map:{
                    ; PRODUCT_NAME = map:{
                        ; columnName = PRODUCT_NAME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "商品名称: ExampleDBとして、コメントの少ないケースを表現するため、
あえてコメントを控えている。実業務ではしっかりとコメントを
入れることが強く強く推奨される。"
                        }
                    }
                    ; PRODUCT_HANDLE_CODE = map:{
                        ; columnName = PRODUCT_HANDLE_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "商品ハンドルコード: 商品を識別する業務上のコード。"
                        }
                    }
                }
            }
            ; PRODUCT_CATEGORY = map:{
                ; tableName = PRODUCT_CATEGORY
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "null"
                    ; previous = "商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。"
                }
                ; columnDiff = map:{
                    ; PRODUCT_CATEGORY_CODE = map:{
                        ; columnName = PRODUCT_CATEGORY_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "商品カテゴリコード: "
                        }
                    }
                    ; PRODUCT_CATEGORY_NAME = map:{
                        ; columnName = PRODUCT_CATEGORY_NAME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "商品カテゴリ名称: "
                        }
                    }
                    ; PARENT_CATEGORY_CODE = map:{
                        ; columnName = PARENT_CATEGORY_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "親カテゴリコード: 最上位の場合はデータなし。"
                        }
                    }
                }
            }
            ; PRODUCT_STATUS = map:{
                ; tableName = PRODUCT_STATUS
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "null"
                    ; previous = "商品ステータス: 商品のステータスを表現する固定的なマスタ。"
                }
                ; columnDiff = map:{
                    ; PRODUCT_STATUS_CODE = map:{
                        ; columnName = PRODUCT_STATUS_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "商品ステータスコード: 商品ステータスを識別するコード。"
                        }
                    }
                }
            }
            ; PURCHASE = map:{
                ; tableName = PURCHASE
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "null"
                    ; previous = "購入: 一つの商品に対する購入を表現する。
実業務であれば購入詳細というテーブルを作り、「購入という行為」と「その中身（詳細）」を違う粒度のデータとしてそれぞれ管理するのが一般的と言えるでしょう。というか、注文とか請求とかそういうことを考え始めたらもっと複雑になるはずですが、ExampleDBということで割り切っています。"
                }
                ; columnDiff = map:{
                    ; MEMBER_ID = map:{
                        ; columnName = MEMBER_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。"
                        }
                    }
                    ; PRODUCT_ID = map:{
                        ; columnName = PRODUCT_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "商品ID: 商品を参照するID。"
                        }
                    }
                    ; PURCHASE_DATETIME = map:{
                        ; columnName = PURCHASE_DATETIME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "購入日時: 購入した瞬間の日時。"
                        }
                    }
                    ; PURCHASE_COUNT = map:{
                        ; columnName = PURCHASE_COUNT
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "購入数量: 購入した商品の（一回の購入における）数量。"
                        }
                    }
                    ; PURCHASE_PRICE = map:{
                        ; columnName = PURCHASE_PRICE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。"
                        }
                    }
                    ; PAYMENT_COMPLETE_FLG = map:{
                        ; columnName = PAYMENT_COMPLETE_FLG
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "支払完了フラグ: この購入に関しての支払いが完了しているか否か。"
                        }
                    }
                }
            }
            ; REGION = map:{
                ; tableName = REGION
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "null"
                    ; previous = "地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。
業務的one-to-oneの親テーブル。"
                }
                ; columnDiff = map:{
                    ; REGION_ID = map:{
                        ; columnName = REGION_ID
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "地域ID: 地域を識別するID。
珍しく(固定的な)マスタテーブルとしては数値だが、
Exampleなのでやはり色々なパターンがないと。"
                        }
                    }
                    ; REGION_NAME = map:{
                        ; columnName = REGION_NAME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "地域名称: 地域を表す名称。"
                        }
                    }
                }
            }
            ; SERVICE_RANK = map:{
                ; tableName = SERVICE_RANK
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "null"
                    ; previous = "サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）"
                }
                ; columnDiff = map:{
                    ; SERVICE_RANK_CODE = map:{
                        ; columnName = SERVICE_RANK_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "サービスランクコード: サービスランクを識別するコード。"
                        }
                    }
                    ; SERVICE_RANK_NAME = map:{
                        ; columnName = SERVICE_RANK_NAME
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）"
                        }
                    }
                    ; SERVICE_POINT_INCIDENCE = map:{
                        ; columnName = SERVICE_POINT_INCIDENCE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。
ExampleDBとして数少ない貴重な小数点ありのカラム。"
                        }
                    }
                    ; NEW_ACCEPTABLE_FLG = map:{
                        ; columnName = NEW_ACCEPTABLE_FLG
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。"
                        }
                    }
                    ; DESCRIPTION = map:{
                        ; columnName = DESCRIPTION
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "説明: ランクに関する業務的な説明。"
                        }
                    }
                    ; DISPLAY_ORDER = map:{
                        ; columnName = DISPLAY_ORDER
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "表示順: UI上の表示順を表現する番号。"
                        }
                    }
                }
            }
            ; WITHDRAWAL_REASON = map:{
                ; tableName = WITHDRAWAL_REASON
                ; diffType = CHANGE
                ; tableCommentDiff = map:{
                    ; next = "null"
                    ; previous = "退会理由: 会員に選ばせる定型的な退会理由のマスタ。"
                }
                ; columnDiff = map:{
                    ; WITHDRAWAL_REASON_CODE = map:{
                        ; columnName = WITHDRAWAL_REASON_CODE
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "退会理由コード: "
                        }
                    }
                    ; WITHDRAWAL_REASON_TEXT = map:{
                        ; columnName = WITHDRAWAL_REASON_TEXT
                        ; diffType = CHANGE
                        ; columnCommentDiff = map:{
                            ; next = ""
                            ; previous = "退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。"
                        }
                    }
                }
            }
            ; VENDOR_$_DOLLAR = map:{
                ; tableName = VENDOR_$_DOLLAR
                ; diffType = DELETE
            }
            ; VENDOR_CHECK = map:{
                ; tableName = VENDOR_CHECK
                ; diffType = DELETE
            }
            ; VENDOR_THE_LONG_AND_WINDING_TABLE_AND_COLUMN = map:{
                ; tableName = VENDOR_THE_LONG_AND_WINDING_TABLE_AND_COLUMN
                ; diffType = DELETE
            }
            ; VENDOR_THE_LONG_AND_WINDING_TABLE_AND_COLUMN_REF = map:{
                ; tableName = VENDOR_THE_LONG_AND_WINDING_TABLE_AND_COLUMN_REF
                ; diffType = DELETE
            }
            ; SUMMARY_PRODUCT = map:{
                ; tableName = SUMMARY_PRODUCT
                ; diffType = DELETE
            }
            ; SUMMARY_WITHDRAWAL = map:{
                ; tableName = SUMMARY_WITHDRAWAL
                ; diffType = DELETE
            }
        }
    }
    ; 2011/10/19 00:28:11 = map:{
        ; diffDate = 2011/10/19 00:28:11
        ; tableCount = map:{
            ; next = 20
            ; previous = 18
        }
        ; tableDiff = map:{
            ; VENDOR_THE_LONG_AND_WINDING_TABLE_AND_COLUMN = map:{
                ; tableName = VENDOR_THE_LONG_AND_WINDING_TABLE_AND_COLUMN
                ; diffType = ADD
            }
            ; VENDOR_THE_LONG_AND_WINDING_TABLE_AND_COLUMN_REF = map:{
                ; tableName = VENDOR_THE_LONG_AND_WINDING_TABLE_AND_COLUMN_REF
                ; diffType = ADD
            }
        }
    }
    ; 2011/06/17 22:38:01 = map:{
        ; diffDate = 2011/06/17 22:38:01
        ; tableCount = map:{
            ; next = 18
            ; previous = 18
        }
        ; tableDiff = map:{
            ; VENDOR_CHECK = map:{
                ; tableName = VENDOR_CHECK
                ; diffType = CHANGE
                ; columnDiff = map:{
                    ; TYPE_OF_NUMERIC_MAXDECIMAL = map:{
                        ; columnName = TYPE_OF_NUMERIC_MAXDECIMAL
                        ; diffType = CHANGE
                        ; columnSizeDiff = map:{
                            ; next = 38, 38
                            ; previous = 128, 38
                        }
                    }
                }
            }
        }
    }
    ; 2011/06/17 22:33:24 = map:{
        ; diffDate = 2011/06/17 22:33:24
        ; tableCount = map:{
            ; next = 18
            ; previous = 18
        }
        ; tableDiff = map:{
            ; VENDOR_CHECK = map:{
                ; tableName = VENDOR_CHECK
                ; diffType = CHANGE
                ; columnDiff = map:{
                    ; TYPE_OF_NUMERIC_MAXDECIMAL = map:{
                        ; columnName = TYPE_OF_NUMERIC_MAXDECIMAL
                        ; diffType = CHANGE
                        ; columnSizeDiff = map:{
                            ; next = 128, 38
                            ; previous = 38, 127
                        }
                    }
                }
            }
        }
    }
    ; 2011/06/09 20:41:46 = map:{
        ; diffDate = 2011/06/09 20:41:46
        ; tableCount = map:{
            ; next = 18
            ; previous = 17
        }
        ; tableDiff = map:{
            ; MEMBER_ADDRESS = map:{
                ; tableName = MEMBER_ADDRESS
                ; diffType = ADD
            }
        }
    }
    ; 2011/06/09 20:24:02 = map:{
        ; diffDate = 2011/06/09 20:24:02
        ; tableCount = map:{
            ; next = 17
            ; previous = 18
        }
        ; tableDiff = map:{
            ; MEMBER_ADDRESS = map:{
                ; tableName = MEMBER_ADDRESS
                ; diffType = DELETE
            }
        }
    }
    ; 2011/06/03 01:24:36 = map:{
        ; diffDate = 2011/06/03 01:24:36
        ; tableCount = map:{
            ; next = 18
            ; previous = 19
        }
        ; tableDiff = map:{
            ; MEMBER_XXX = map:{
                ; tableName = MEMBER_XXX
                ; diffType = DELETE
            }
        }
    }
    ; 2011/06/02 21:15:51 = map:{
        ; diffDate = 2011/06/02 21:15:51
        ; tableCount = map:{
            ; next = 19
            ; previous = 18
        }
        ; tableDiff = map:{
            ; MEMBER_XXX = map:{
                ; tableName = MEMBER_XXX
                ; diffType = ADD
            }
        }
    }
    ; 2011/05/20 15:57:43 = map:{
        ; diffDate = 2011/05/20 15:57:43
        ; tableCount = map:{
            ; next = 18
            ; previous = 18
        }
        ; tableDiff = map:{
            ; MEMBER = map:{
                ; tableName = MEMBER
                ; diffType = CHANGE
                ; columnDiff = map:{
                    ; REGISTER_PROCESS = map:{
                        ; columnName = REGISTER_PROCESS
                        ; diffType = DELETE
                    }
                    ; UPDATE_PROCESS = map:{
                        ; columnName = UPDATE_PROCESS
                        ; diffType = DELETE
                    }
                }
            }
            ; MEMBER_ADDRESS = map:{
                ; tableName = MEMBER_ADDRESS
                ; diffType = CHANGE
                ; columnDiff = map:{
                    ; REGISTER_PROCESS = map:{
                        ; columnName = REGISTER_PROCESS
                        ; diffType = DELETE
                    }
                    ; UPDATE_PROCESS = map:{
                        ; columnName = UPDATE_PROCESS
                        ; diffType = DELETE
                    }
                }
            }
            ; MEMBER_SECURITY = map:{
                ; tableName = MEMBER_SECURITY
                ; diffType = CHANGE
                ; columnDiff = map:{
                    ; REGISTER_PROCESS = map:{
                        ; columnName = REGISTER_PROCESS
                        ; diffType = DELETE
                    }
                    ; UPDATE_PROCESS = map:{
                        ; columnName = UPDATE_PROCESS
                        ; diffType = DELETE
                    }
                }
            }
            ; MEMBER_SERVICE = map:{
                ; tableName = MEMBER_SERVICE
                ; diffType = CHANGE
                ; columnDiff = map:{
                    ; REGISTER_PROCESS = map:{
                        ; columnName = REGISTER_PROCESS
                        ; diffType = DELETE
                    }
                    ; UPDATE_PROCESS = map:{
                        ; columnName = UPDATE_PROCESS
                        ; diffType = DELETE
                    }
                }
            }
            ; MEMBER_WITHDRAWAL = map:{
                ; tableName = MEMBER_WITHDRAWAL
                ; diffType = CHANGE
                ; columnDiff = map:{
                    ; REGISTER_PROCESS = map:{
                        ; columnName = REGISTER_PROCESS
                        ; diffType = DELETE
                    }
                    ; UPDATE_PROCESS = map:{
                        ; columnName = UPDATE_PROCESS
                        ; diffType = DELETE
                    }
                }
            }
            ; PRODUCT = map:{
                ; tableName = PRODUCT
                ; diffType = CHANGE
                ; columnDiff = map:{
                    ; REGISTER_PROCESS = map:{
                        ; columnName = REGISTER_PROCESS
                        ; diffType = DELETE
                    }
                    ; UPDATE_PROCESS = map:{
                        ; columnName = UPDATE_PROCESS
                        ; diffType = DELETE
                    }
                }
            }
            ; PURCHASE = map:{
                ; tableName = PURCHASE
                ; diffType = CHANGE
                ; columnDiff = map:{
                    ; REGISTER_PROCESS = map:{
                        ; columnName = REGISTER_PROCESS
                        ; diffType = DELETE
                    }
                    ; UPDATE_PROCESS = map:{
                        ; columnName = UPDATE_PROCESS
                        ; diffType = DELETE
                    }
                }
            }
        }
    }
    ; 2011/05/05 09:39:01 = map:{
        ; diffDate = 2011/05/05 09:39:01
        ; tableCount = map:{
            ; next = 18
            ; previous = 18
        }
        ; tableDiff = map:{
            ; MEMBER_SERVICE = map:{
                ; tableName = MEMBER_SERVICE
                ; diffType = CHANGE
                ; columnDiff = map:{
                    ; MEMBER_SERVICE_ID = map:{
                        ; columnName = MEMBER_SERVICE_ID
                        ; diffType = ADD
                    }
                }
                ; primaryKeyDiff = map:{
                    ; CONSTRAINT_6F = map:{
                        ; constraintName = CONSTRAINT_6F
                        ; diffType = CHANGE
                        ; columnDiff = map:{
                            ; next = MEMBER_SERVICE_ID
                            ; previous = MEMBER_ID
                        }
                    }
                }
                ; uniqueKeyDiff = map:{
                    ; UQ_MEMBER_SERVICE_INDEX_6 = map:{
                        ; constraintName = UQ_MEMBER_SERVICE_INDEX_6
                        ; diffType = ADD
                    }
                }
                ; indexDiff = map:{
                    ; FK_MEMBER_SERVICE_MEMBER_INDEX_6 = map:{
                        ; constraintName = FK_MEMBER_SERVICE_MEMBER_INDEX_6
                        ; diffType = ADD
                    }
                }
            }
            ; PRODUCT_STATUS = map:{
                ; tableName = PRODUCT_STATUS
                ; diffType = CHANGE
                ; columnDiff = map:{
                    ; DISPLAY_ORDER = map:{
                        ; columnName = DISPLAY_ORDER
                        ; diffType = ADD
                    }
                }
                ; uniqueKeyDiff = map:{
                    ; UQ_PRODUCT_STATUS_DISPLAY_ORDER_INDEX_1 = map:{
                        ; constraintName = UQ_PRODUCT_STATUS_DISPLAY_ORDER_INDEX_1
                        ; diffType = ADD
                    }
                }
            }
        }
    }
    ; 2011/04/18 00:52:40 = map:{
        ; diffDate = 2011/04/18 00:52:40
        ; tableCount = map:{
            ; next = 18
            ; previous = 18
        }
        ; tableDiff = map:{
            ; MEMBER_STATUS = map:{
                ; tableName = MEMBER_STATUS
                ; diffType = CHANGE
                ; uniqueKeyDiff = map:{
                    ; UQ_MEMBER_STATUS_MEMBER_STATUS_NAME_INDEX_4 = map:{
                        ; constraintName = UQ_MEMBER_STATUS_MEMBER_STATUS_NAME_INDEX_4
                        ; diffType = DELETE
                    }
                }
            }
            ; PRODUCT_CATEGORY = map:{
                ; tableName = PRODUCT_CATEGORY
                ; diffType = CHANGE
                ; uniqueKeyDiff = map:{
                    ; UQ_PRODUCT_CATEGORY_PRODUCT_CATEGORY_NAME_INDEX_3 = map:{
                        ; constraintName = UQ_PRODUCT_CATEGORY_PRODUCT_CATEGORY_NAME_INDEX_3
                        ; diffType = DELETE
                    }
                }
            }
            ; PRODUCT_STATUS = map:{
                ; tableName = PRODUCT_STATUS
                ; diffType = CHANGE
                ; uniqueKeyDiff = map:{
                    ; UQ_PRODUCT_STATUS_PRODUCT_STATUS_NAME_INDEX_1 = map:{
                        ; constraintName = UQ_PRODUCT_STATUS_PRODUCT_STATUS_NAME_INDEX_1
                        ; diffType = DELETE
                    }
                }
            }
            ; REGION = map:{
                ; tableName = REGION
                ; diffType = CHANGE
                ; uniqueKeyDiff = map:{
                    ; UQ_REGION_REGION_NAME_INDEX_8 = map:{
                        ; constraintName = UQ_REGION_REGION_NAME_INDEX_8
                        ; diffType = DELETE
                    }
                }
            }
            ; SERVICE_RANK = map:{
                ; tableName = SERVICE_RANK
                ; diffType = CHANGE
                ; uniqueKeyDiff = map:{
                    ; UQ_SERVICE_RANK_SERVICE_RANK_NAME_INDEX_A = map:{
                        ; constraintName = UQ_SERVICE_RANK_SERVICE_RANK_NAME_INDEX_A
                        ; diffType = DELETE
                    }
                }
            }
        }
    }
    ; 2010/12/03 21:20:09 = map:{
        ; diffDate = 2010/12/03 21:20:09
        ; tableCount = map:{
            ; next = 18
            ; previous = 18
        }
        ; tableDiff = map:{
            ; SUMMARY_WITHDRAWAL = map:{
                ; tableName = SUMMARY_WITHDRAWAL
                ; diffType = CHANGE
                ; columnDiff = map:{
                    ; MEMBER_STATUS_CODE = map:{
                        ; columnName = MEMBER_STATUS_CODE
                        ; diffType = ADD
                    }
                    ; MEMBER_STATUS_NAME = map:{
                        ; columnName = MEMBER_STATUS_NAME
                        ; diffType = ADD
                    }
                }
            }
        }
    }
    ; 2010/12/03 16:37:03 = map:{
        ; diffDate = 2010/12/03 16:37:03
        ; tableCount = map:{
            ; next = 18
            ; previous = 18
        }
        ; tableDiff = map:{
            ; SUMMARY_WITHDRAWAL = map:{
                ; tableName = SUMMARY_WITHDRAWAL
                ; diffType = CHANGE
                ; columnDiff = map:{
                    ; MAX_PURCHASE_PRICE = map:{
                        ; columnName = MAX_PURCHASE_PRICE
                        ; diffType = ADD
                    }
                }
            }
        }
    }
    ; 2010/12/03 13:23:03 = map:{
        ; diffDate = 2010/12/03 13:23:03
        ; tableCount = map:{
            ; next = 18
            ; previous = 17
        }
        ; tableDiff = map:{
            ; SUMMARY_WITHDRAWAL = map:{
                ; tableName = SUMMARY_WITHDRAWAL
                ; diffType = ADD
            }
        }
    }
    ; 2010/11/26 23:56:15 = map:{
        ; diffDate = 2010/11/26 23:56:15
        ; tableCount = map:{
            ; next = 17
            ; previous = 16
        }
        ; tableDiff = map:{
            ; REGION = map:{
                ; tableName = REGION
                ; diffType = ADD
            }
            ; MEMBER_ADDRESS = map:{
                ; tableName = MEMBER_ADDRESS
                ; diffType = CHANGE
                ; columnDiff = map:{
                    ; REGION_ID = map:{
                        ; columnName = REGION_ID
                        ; diffType = ADD
                    }
                }
                ; foreignKeyDiff = map:{
                    ; FK_MEMBER_ADDRESS_REGION = map:{
                        ; constraintName = FK_MEMBER_ADDRESS_REGION
                        ; diffType = ADD
                    }
                }
                ; indexDiff = map:{
                    ; FK_MEMBER_ADDRESS_REGION_INDEX_B = map:{
                        ; constraintName = FK_MEMBER_ADDRESS_REGION_INDEX_B
                        ; diffType = ADD
                    }
                }
            }
            ; PRODUCT = map:{
                ; tableName = PRODUCT
                ; diffType = CHANGE
                ; columnDiff = map:{
                    ; REGULAR_PRICE = map:{
                        ; columnName = REGULAR_PRICE
                        ; diffType = ADD
                    }
                    ; PRODUCT_REGULAR_PRICE = map:{
                        ; columnName = PRODUCT_REGULAR_PRICE
                        ; diffType = DELETE
                    }
                }
            }
            ; SERVICE_RANK = map:{
                ; tableName = SERVICE_RANK
                ; diffType = CHANGE
                ; columnDiff = map:{
                    ; REGISTER_DATETIME = map:{
                        ; columnName = REGISTER_DATETIME
                        ; diffType = DELETE
                    }
                    ; REGISTER_USER = map:{
                        ; columnName = REGISTER_USER
                        ; diffType = DELETE
                    }
                    ; REGISTER_PROCESS = map:{
                        ; columnName = REGISTER_PROCESS
                        ; diffType = DELETE
                    }
                    ; UPDATE_DATETIME = map:{
                        ; columnName = UPDATE_DATETIME
                        ; diffType = DELETE
                    }
                    ; UPDATE_USER = map:{
                        ; columnName = UPDATE_USER
                        ; diffType = DELETE
                    }
                    ; UPDATE_PROCESS = map:{
                        ; columnName = UPDATE_PROCESS
                        ; diffType = DELETE
                    }
                    ; VERSION_NO = map:{
                        ; columnName = VERSION_NO
                        ; diffType = DELETE
                    }
                }
                ; uniqueKeyDiff = map:{
                    ; UQ_SERVICE_RANK_DISPLAY_ORDER_INDEX_A = map:{
                        ; constraintName = UQ_SERVICE_RANK_DISPLAY_ORDER_INDEX_A
                        ; diffType = ADD
                    }
                }
            }
        }
    }
    ; 2010/11/26 19:52:15 = map:{
        ; diffDate = 2010/11/26 19:52:15
        ; comment = for many pattern tests
        ; tableCount = map:{
            ; next = 16
            ; previous = 13
        }
        ; tableDiff = map:{
            ; MEMBER_SERVICE = map:{
                ; tableName = MEMBER_SERVICE
                ; diffType = ADD
            }
            ; PRODUCT_CATEGORY = map:{
                ; tableName = PRODUCT_CATEGORY
                ; diffType = ADD
            }
            ; SERVICE_RANK = map:{
                ; tableName = SERVICE_RANK
                ; diffType = ADD
            }
            ; MEMBER_SECURITY = map:{
                ; tableName = MEMBER_SECURITY
                ; diffType = CHANGE
                ; columnDiff = map:{
                    ; REMINDER_USE_COUNT = map:{
                        ; columnName = REMINDER_USE_COUNT
                        ; diffType = ADD
                    }
                }
            }
            ; PRODUCT = map:{
                ; tableName = PRODUCT
                ; diffType = CHANGE
                ; columnDiff = map:{
                    ; PRODUCT_CATEGORY_CODE = map:{
                        ; columnName = PRODUCT_CATEGORY_CODE
                        ; diffType = ADD
                    }
                    ; PRODUCT_REGULAR_PRICE = map:{
                        ; columnName = PRODUCT_REGULAR_PRICE
                        ; diffType = ADD
                    }
                }
                ; foreignKeyDiff = map:{
                    ; FK_PRODUCT_PRODUCT_CATEGORY = map:{
                        ; constraintName = FK_PRODUCT_PRODUCT_CATEGORY
                        ; diffType = ADD
                    }
                }
                ; indexDiff = map:{
                    ; FK_PRODUCT_PRODUCT_CATEGORY_INDEX_1 = map:{
                        ; constraintName = FK_PRODUCT_PRODUCT_CATEGORY_INDEX_1
                        ; diffType = ADD
                    }
                }
            }
        }
    }
    ; 2010/06/15 16:41:11 = map:{
        ; diffDate = 2010/06/15 16:41:11
        ; comment = restore the dollar table (wrong deleted)
        ; tableCount = map:{
            ; next = 13
            ; previous = 12
        }
        ; tableDiff = map:{
            ; VENDOR_$_DOLLAR = map:{
                ; tableName = VENDOR_$_DOLLAR
                ; diffType = ADD
            }
        }
    }
    ; 2010/06/15 16:37:23 = map:{
        ; diffDate = 2010/06/15 16:37:23
        ; tableCount = map:{
            ; next = 12
            ; previous = 14
        }
        ; tableDiff = map:{
            ; VENDOR-NON COMPILABLE = map:{
                ; tableName = VENDOR-NON COMPILABLE
                ; diffType = DELETE
            }
            ; VENDOR_$_DOLLAR = map:{
                ; tableName = VENDOR_$_DOLLAR
                ; diffType = DELETE
            }
        }
    }
    ; 2010/06/15 06:27:55 = map:{
        ; diffDate = 2010/06/15 06:27:55
        ; tableCount = map:{
            ; next = 14
            ; previous = 14
        }
        ; tableDiff = map:{
            ; VENDOR-NON COMPILABLE = map:{
                ; tableName = VENDOR-NON COMPILABLE
                ; diffType = CHANGE
                ; foreignKeyDiff = map:{
                    ; FK_VENDOR_NON_COMPPILABLE_SELF = map:{
                        ; constraintName = FK_VENDOR_NON_COMPPILABLE_SELF
                        ; diffType = ADD
                    }
                }
                ; indexDiff = map:{
                    ; FK_VENDOR_NON_COMPPILABLE_SELF_INDEX_D = map:{
                        ; constraintName = FK_VENDOR_NON_COMPPILABLE_SELF_INDEX_D
                        ; diffType = ADD
                    }
                }
            }
        }
    }
    ; 2010/06/15 06:15:04 = map:{
        ; diffDate = 2010/06/15 06:15:04
        ; tableCount = map:{
            ; next = 14
            ; previous = 14
        }
        ; tableDiff = map:{
            ; VENDOR-NON COMPILABLE = map:{
                ; tableName = VENDOR-NON COMPILABLE
                ; diffType = CHANGE
                ; columnDiff = map:{
                    ; PARENT-ID = map:{
                        ; columnName = PARENT-ID
                        ; diffType = ADD
                    }
                }
            }
        }
    }
    ; 2010/06/15 04:24:10 = map:{
        ; diffDate = 2010/06/15 04:24:10
        ; tableCount = map:{
            ; next = 14
            ; previous = 4
        }
        ; tableDiff = map:{
            ; MEMBER = map:{
                ; tableName = MEMBER
                ; diffType = ADD
            }
            ; MEMBER_ADDRESS = map:{
                ; tableName = MEMBER_ADDRESS
                ; diffType = ADD
            }
            ; MEMBER_LOGIN = map:{
                ; tableName = MEMBER_LOGIN
                ; diffType = ADD
            }
            ; MEMBER_SECURITY = map:{
                ; tableName = MEMBER_SECURITY
                ; diffType = ADD
            }
            ; MEMBER_STATUS = map:{
                ; tableName = MEMBER_STATUS
                ; diffType = ADD
            }
            ; MEMBER_WITHDRAWAL = map:{
                ; tableName = MEMBER_WITHDRAWAL
                ; diffType = ADD
            }
            ; PRODUCT = map:{
                ; tableName = PRODUCT
                ; diffType = ADD
            }
            ; PRODUCT_STATUS = map:{
                ; tableName = PRODUCT_STATUS
                ; diffType = ADD
            }
            ; PURCHASE = map:{
                ; tableName = PURCHASE
                ; diffType = ADD
            }
            ; VENDOR-NON COMPILABLE = map:{
                ; tableName = VENDOR-NON COMPILABLE
                ; diffType = ADD
            }
            ; SUMMARY_PRODUCT = map:{
                ; tableName = SUMMARY_PRODUCT
                ; diffType = ADD
            }
            ; VENDOR-HYPHEN SPACE = map:{
                ; tableName = VENDOR-HYPHEN SPACE
                ; diffType = DELETE
            }
        }
    }
    ; 2010/06/15 04:23:08 = map:{
        ; diffDate = 2010/06/15 04:23:08
        ; tableCount = map:{
            ; next = 4
            ; previous = 14
        }
        ; tableDiff = map:{
            ; MEMBER = map:{
                ; tableName = MEMBER
                ; diffType = DELETE
            }
            ; MEMBER_ADDRESS = map:{
                ; tableName = MEMBER_ADDRESS
                ; diffType = DELETE
            }
            ; MEMBER_LOGIN = map:{
                ; tableName = MEMBER_LOGIN
                ; diffType = DELETE
            }
            ; MEMBER_SECURITY = map:{
                ; tableName = MEMBER_SECURITY
                ; diffType = DELETE
            }
            ; MEMBER_STATUS = map:{
                ; tableName = MEMBER_STATUS
                ; diffType = DELETE
            }
            ; MEMBER_WITHDRAWAL = map:{
                ; tableName = MEMBER_WITHDRAWAL
                ; diffType = DELETE
            }
            ; PRODUCT = map:{
                ; tableName = PRODUCT
                ; diffType = DELETE
            }
            ; PRODUCT_STATUS = map:{
                ; tableName = PRODUCT_STATUS
                ; diffType = DELETE
            }
            ; PURCHASE = map:{
                ; tableName = PURCHASE
                ; diffType = DELETE
            }
            ; SUMMARY_PRODUCT = map:{
                ; tableName = SUMMARY_PRODUCT
                ; diffType = DELETE
            }
        }
    }
    ; 2010/06/15 04:10:23 = map:{
        ; diffDate = 2010/06/15 04:10:23
        ; tableCount = map:{
            ; next = 14
            ; previous = 13
        }
        ; tableDiff = map:{
            ; VENDOR-HYPHEN SPACE = map:{
                ; tableName = VENDOR-HYPHEN SPACE
                ; diffType = ADD
            }
            ; VENDOR_$_DOLLAR = map:{
                ; tableName = VENDOR_$_DOLLAR
                ; diffType = ADD
            }
            ; TMP_TMPP = map:{
                ; tableName = TMP_TMPP
                ; diffType = DELETE
            }
        }
    }
    ; 2010/06/12 18:18:45 = map:{
        ; diffDate = 2010/06/12 18:18:45
        ; tableCount = map:{
            ; next = 13
            ; previous = 13
        }
        ; tableDiff = map:{
            ; TMP_TMPP = map:{
                ; tableName = TMP_TMPP
                ; diffType = CHANGE
                ; columnDiff = map:{
                    ; VENDOR_ID = map:{
                        ; columnName = VENDOR_ID
                        ; diffType = ADD
                    }
                    ; VENDOR_CHECK_ID = map:{
                        ; columnName = VENDOR_CHECK_ID
                        ; diffType = DELETE
                    }
                }
                ; primaryKeyDiff = map:{
                    ; CONSTRAINT_8D = map:{
                        ; constraintName = CONSTRAINT_8D
                        ; diffType = CHANGE
                        ; columnDiff = map:{
                            ; next = VENDOR_ID
                            ; previous = VENDOR_CHECK_ID
                        }
                    }
                }
            }
        }
    }
    ; 2010/06/12 18:18:05 = map:{
        ; diffDate = 2010/06/12 18:18:05
        ; tableCount = map:{
            ; next = 13
            ; previous = 13
        }
        ; tableDiff = map:{
            ; TMP_TMPP = map:{
                ; tableName = TMP_TMPP
                ; diffType = ADD
            }
            ; TMP_TMP = map:{
                ; tableName = TMP_TMP
                ; diffType = DELETE
            }
        }
    }
    ; 2010/06/12 18:16:43 = map:{
        ; diffDate = 2010/06/12 18:16:43
        ; tableCount = map:{
            ; next = 13
            ; previous = 13
        }
        ; tableDiff = map:{
            ; TMP_TMP = map:{
                ; tableName = TMP_TMP
                ; diffType = CHANGE
                ; primaryKeyDiff = map:{
                    ; CONSTRAINT_E3 = map:{
                        ; constraintName = CONSTRAINT_E3
                        ; diffType = ADD
                    }
                }
            }
        }
    }
    ; 2010/06/12 18:16:10 = map:{
        ; diffDate = 2010/06/12 18:16:10
        ; tableCount = map:{
            ; next = 13
            ; previous = 13
        }
        ; tableDiff = map:{
            ; TMP_TMP = map:{
                ; tableName = TMP_TMP
                ; diffType = CHANGE
                ; primaryKeyDiff = map:{
                    ; CONSTRAINT_E3 = map:{
                        ; constraintName = CONSTRAINT_E3
                        ; diffType = DELETE
                    }
                }
            }
        }
    }
    ; 2010/06/12 18:15:28 = map:{
        ; diffDate = 2010/06/12 18:15:28
        ; tableCount = map:{
            ; next = 13
            ; previous = 12
        }
        ; tableDiff = map:{
            ; TMP_TMP = map:{
                ; tableName = TMP_TMP
                ; diffType = ADD
            }
        }
    }
    ; 2010/06/12 16:53:57 = map:{
        ; diffDate = 2010/06/12 16:53:57
        ; tableCount = map:{
            ; next = 12
            ; previous = 12
        }
        ; tableDiff = map:{
            ; VENDOR_CHECK = map:{
                ; tableName = VENDOR_CHECK
                ; diffType = CHANGE
                ; columnDiff = map:{
                    ; TYPE_OF_INTEGER = map:{
                        ; columnName = TYPE_OF_INTEGER
                        ; diffType = ADD
                    }
                    ; TYPE_OF_BIGINT = map:{
                        ; columnName = TYPE_OF_BIGINT
                        ; diffType = ADD
                    }
                }
            }
        }
    }
}